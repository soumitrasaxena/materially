#usda 1.0
(
    defaultPrim = "skin_0"
)

def Scope "skin_0" (
    assetInfo = {
        string name = "char/wolf/skin_0"
    }
    assetType = "char_subasset"
    kind = "component"
)
{
    custom string rigged_name = "skin_0"
    custom string scalp = "skin_0"

    def Scope "Geometry" (
        prepend variantSets = "models"
    )
    {
        def "skin_0"
        {
            custom float moonray:adaptive_error = 4
            custom int moonray:curved_motion_blur_sample_count = 2
            custom float moonray:mesh_resolution = 3
            custom asset moonray:model = @${a_lib_model_dir}/char/wolf/skin_0//alembic/skin_0.abc@
            uniform token purpose = "render"

            over "m_logum"
            {
                rel material:binding = </skin_0/Looks/mouth_mtl>
            }

            over "m_tongue"
            {
                rel material:binding = </skin_0/Looks/mouth_mtl>
            }

            over "m_skin"
            {
                over "m_inmouth"
                {
                    rel material:binding = </skin_0/Looks/mouth_mtl>
                }

                over "l_arm"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_cheek"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_ear"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_eyelid"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_foot"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_hand"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_index"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_leg"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_middle"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_pinky"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_thumb"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_toeindex"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_toemiddle"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_toepinky"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "l_toethumb"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_back"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_backhead"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_brow"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_chest"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_chin"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_lolip"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_neck"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_nose"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_snout"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "m_uplip"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_arm"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_cheek"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_ear"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_eyelid"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_foot"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_hand"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_index"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_leg"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_middle"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_pinky"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_thumb"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_toeindex"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_toemiddle"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_toepinky"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }

                over "r_toethumb"
                {
                    rel material:binding = </skin_0/Looks/skin_mtl>
                }
            }

            over "m_upgum"
            {
                rel material:binding = </skin_0/Looks/mouth_mtl>
            }

            over "l_indexnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_middlenail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_middletoenail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_pinkynail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_thumbnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_toeindexnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_toepinkynail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_toethumbnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_indexnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_middlenail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_middletoenail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_pinkynail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_thumbnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_toeindexnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_toepinkynail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "r_toethumbnail"
            {
                rel material:binding = </skin_0/Looks/skin_mtl>
            }

            over "l_lotooth1"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "l_lotooth2"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "l_lotooth3"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "l_uptooth1"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "l_uptooth2"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "l_uptooth3"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "m_lotooth"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "m_uptooth"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "r_lotooth1"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "r_lotooth2"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "r_lotooth3"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "r_uptooth1"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "r_uptooth2"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }

            over "r_uptooth3"
            {
                rel material:binding = </skin_0/Looks/teeth_mtl>
            }
        }
        variantSet "models" = {
            "library" {
                over "skin_0" (
                    payload = @${a_lib_model_dir}/char/wolf/skin_0//usd/skin_0.usdc@
                )
                {
                    float3[] extentsHint = [(-29.66551, -30.19151, -6.5881352), (29.66551, 30.19151, 6.5881352)]
                    custom asset moonray:model = @${a_lib_model_dir}/char/wolf/skin_0//alembic/skin_0.abc@
                }

            }
        }
    }

    def "Looks"
    {
        def Material "mouth_mtl" (
            customData = {
                string[] creationPackages = ["houdini_moonray-8.11.2.0", "moonshine-7.17"]
            }
        )
        {
            token outputs:moonray:surface.connect = </skin_0/Looks/mouth_mtl/DwaSkinMaterial1_moonray.outputs:surface>

            def Shader "DwaSkinMaterial1_moonray"
            {
                uniform token info:id = "DwaSkinMaterial"
                float3 inputs:albedo.connect = </skin_0/Looks/mouth_mtl/ColorCorrectHsvMap1_moonray.outputs:out>
                string inputs:diffuse_transmission_blending_behavior = "RGB"
                bool inputs:enable_sss_input_normal = 1
                token inputs:input_normal.connect = </skin_0/Looks/mouth_mtl/nml_moonray.outputs:out>
                float inputs:refractive_index = 1.4
                float inputs:roughness = 1
                float inputs:roughness.connect = </skin_0/Looks/mouth_mtl/rgh_moonray.outputs:out>
                color3f inputs:scattering_color = (1, 0.28399998, 0.28399998)
                float inputs:scattering_radius = 0.5
                string inputs:specular_model = "GGX"
                token outputs:surface
                uniform float2 ui:nodegraph:node:pos = (6.55941, 0.809715)
            }

            def Shader "msk_skin_ss_radius_moonray"
            {
                uniform token info:id = "ImageMap"
                string inputs:gamma = "off"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/msk_skin_ss_radius/msk_skin_ss_radius.<UDIM>.tx@
                int inputs:udim_max_v = 20
                uniform float2 ui:nodegraph:node:pos = (-3.44806, 1.30472)
            }

            def Shader "nml_moonray"
            {
                uniform token info:id = "ImageNormalMap"
                asset inputs:tangent_space_normal_texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/nml/nml.<UDIM>.tx@
                int inputs:udim_max_v = 20
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (-1.97878, 3.33269)
            }

            def Shader "ColorCorrectHsvMap1_moonray"
            {
                uniform token info:id = "ColorCorrectHsvMap"
                float3 inputs:input.connect = </skin_0/Looks/mouth_mtl/clr_moonray.outputs:out>
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (0.823854, -0.91829)
            }

            def Shader "rgh_moonray"
            {
                uniform token info:id = "ImageMap"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/rgh/rgh.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-2.87662, -0.382062)
            }

            def Shader "clr_moonray"
            {
                uniform token info:id = "ImageMap"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/clr/clr.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-2.1047, -2.55511)
            }
        }

        def Material "skin_mtl" (
            customData = {
                string[] creationPackages = ["houdini_moonray-8.11.2.0", "moonshine-7.17"]
            }
        )
        {
            token outputs:moonray:surface.connect = </skin_0/Looks/skin_mtl/DwaSkinMaterial1_moonray.outputs:surface>

            def Shader "DwaSkinMaterial1_moonray"
            {
                uniform token info:id = "DwaSkinMaterial"
                float3 inputs:albedo.connect = </skin_0/Looks/skin_mtl/ColorCorrectHsvMap1_moonray.outputs:out>
                string inputs:diffuse_transmission_blending_behavior = "RGB"
                token inputs:extra_aovs.connect = </skin_0/Looks/skin_mtl/aov_list_moonray.outputs:out>
                token inputs:input_normal.connect = </skin_0/Looks/skin_mtl/nml_moonray.outputs:out>
                float inputs:refractive_index = 1.35
                float inputs:roughness = 1
                float inputs:roughness.connect = </skin_0/Looks/skin_mtl/LayerMap2_moonray.outputs:out>
                string inputs:specular_model = "GGX"
                token outputs:surface
                uniform float2 ui:nodegraph:node:pos = (17.0082, 2.30091)
            }

            def Shader "msk_lipline_moonray"
            {
                uniform token info:id = "ImageMap"
                vector3f inputs:input_texture_coordinates = (1, 1, 1)
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/msk_lipline/msk_lipline.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-6.41237, 9.97121)
            }

            def Shader "ExtraAovMap_msk_monkey_moonray"
            {
                uniform token info:id = "ExtraAovMap"
                float3 inputs:color.connect = </skin_0/Looks/skin_mtl/msk_monkey_moonray.outputs:out>
                string inputs:label = "U_monkey_mask"
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (8.00117, 11.412)
            }

            def Shader "msk_monkey_moonray"
            {
                uniform token info:id = "ImageMap"
                vector3f inputs:input_texture_coordinates = (1, 1, 1)
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/msk_monkey/msk_monkey.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-6.41237, 11.412)
            }

            def Shader "ExtraAovMap_msk_lipline_moonray"
            {
                uniform token info:id = "ExtraAovMap"
                float3 inputs:color.connect = </skin_0/Looks/skin_mtl/msk_lipline_moonray.outputs:out>
                string inputs:label = "U_lipline_mask"
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (8.00117, 9.97121)
            }

            def Shader "aov_list_moonray"
            {
                uniform token info:id = "ListMap"
                token inputs:map0.connect = </skin_0/Looks/skin_mtl/ExtraAovMap_msk_lipline_moonray.outputs:out>
                token inputs:map2.connect = </skin_0/Looks/skin_mtl/ExtraAovMap_msk_monkey_moonray.outputs:out>
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (11.3475, 10.432)
            }

            def Shader "nose_spec_front_moonray"
            {
                uniform token info:id = "ConstantColorMap"
                color3f inputs:color_value = (0.75, 0.75, 0.75)
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-2.07653, -0.675525)
            }

            def Shader "nose_color_front_facing_moonray"
            {
                uniform token info:id = "ConstantColorMap"
                color3f inputs:color_value = (0.008, 0.0032, 0.00576)
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-6.83679, 4.75591)
            }

            def Shader "LayerMap4_moonray"
            {
                uniform token info:id = "LayerMap"
                float3 inputs:input_A.connect = </skin_0/Looks/skin_mtl/LayerMap3_moonray.outputs:out>
                float3 inputs:input_B.connect = </skin_0/Looks/skin_mtl/clr_moonray.outputs:out>
                float3 inputs:mask.connect = </skin_0/Looks/skin_mtl/msk_nose_moonray.outputs:out>
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (0.997447, 3.77591)
            }

            def Shader "msk_nose_moonray"
            {
                uniform token info:id = "ImageMap"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/msk_nose/msk_nose.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-2.07653, 2.12005)
            }

            def Shader "clr_moonray"
            {
                uniform token info:id = "ImageMap"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/clr/clr.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-6.69511, 6.36355)
            }

            def Shader "LayerMap3_moonray"
            {
                uniform token info:id = "LayerMap"
                float3 inputs:input_A.connect = </skin_0/Looks/skin_mtl/clr_moonray.outputs:out>
                float3 inputs:input_B.connect = </skin_0/Looks/skin_mtl/nose_color_front_facing_moonray.outputs:out>
                float3 inputs:mask.connect = </skin_0/Looks/skin_mtl/DirectionalMap4_moonray.outputs:out>
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-3.81711, 3.18628)
            }

            def Shader "DirectionalMap4_moonray"
            {
                uniform token info:id = "DirectionalMap"
                color3f inputs:color_a = (0.3, 0.3, 0.3)
                string inputs:falloff_type = "linear"
                float inputs:smoothstep_end = 0.5
                float inputs:smoothstep_start = 0
                bool inputs:use_smoothstep = 1
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-6.69511, 1.61653)
            }

            def Shader "LayerMap2_moonray"
            {
                uniform token info:id = "LayerMap"
                float3 inputs:input_A.connect = </skin_0/Looks/skin_mtl/LayerMap1_moonray.outputs:out>
                float3 inputs:input_B.connect = </skin_0/Looks/skin_mtl/rgh_moonray.outputs:out>
                float3 inputs:mask.connect = </skin_0/Looks/skin_mtl/msk_nose_moonray.outputs:out>
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (3.85571, 0.636531)
            }

            def Shader "rgh_moonray"
            {
                uniform token info:id = "ImageMap"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/rgh/rgh.<UDIM>.tx@
                int inputs:udim_max_v = 20
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-2.07653, 0.786531)
            }

            def Shader "LayerMap1_moonray"
            {
                uniform token info:id = "LayerMap"
                float3 inputs:input_A.connect = </skin_0/Looks/skin_mtl/rgh_moonray.outputs:out>
                float3 inputs:input_B.connect = </skin_0/Looks/skin_mtl/nose_spec_front_moonray.outputs:out>
                float3 inputs:mask.connect = </skin_0/Looks/skin_mtl/DirectionalMap3_moonray.outputs:out>
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (1.62657, -0.343469)
            }

            def Shader "DirectionalMap3_moonray"
            {
                uniform token info:id = "DirectionalMap"
                color3f inputs:color_a = (0.5, 0.5, 0.5)
                string inputs:falloff_type = "linear"
                float inputs:smoothstep_end = 0.5
                float inputs:smoothstep_start = 0
                bool inputs:use_smoothstep = 1
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (-1.95152, -3.53774)
            }

            def Shader "msk_skin_ss_radius_moonray"
            {
                uniform token info:id = "ImageMap"
                string inputs:gamma = "off"
                asset inputs:texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/msk_skin_ss_radius/msk_skin_ss_radius.<UDIM>.tx@
                int inputs:udim_max_v = 20
                uniform float2 ui:nodegraph:node:pos = (-2.07653, -4.87881)
            }

            def Shader "nml_moonray"
            {
                uniform token info:id = "ImageNormalMap"
                asset inputs:tangent_space_normal_texture = @${a_lib_mtl_dir}/char/wolf/skin_0/default/textures/nml/nml.<UDIM>.tx@
                int inputs:udim_max_v = 20
                token outputs:out
                uniform float2 ui:nodegraph:node:pos = (3.627, 6.99887)
            }

            def Shader "ColorCorrectHsvMap1_moonray"
            {
                uniform token info:id = "ColorCorrectHsvMap"
                float3 inputs:input.connect = </skin_0/Looks/skin_mtl/LayerMap4_moonray.outputs:out>
                float3 outputs:out
                uniform float2 ui:nodegraph:node:pos = (2.91252, 4.58299)
            }
        }

        def Material "teeth_mtl" (
            customData = {
                string[] creationPackages = ["houdini_moonray-8.11.2.0", "moonshine-7.17"]
            }
        )
        {
            token outputs:moonray:surface.connect = </skin_0/Looks/teeth_mtl/teeth_moonray.outputs:surface>

            def Shader "teeth_moonray"
            {
                uniform token info:id = "DwaSkinMaterial"
                color3f inputs:albedo = (0.6, 0.6, 0.6)
                string inputs:diffuse_transmission_blending_behavior = "RGB"
                bool inputs:enable_sss_input_normal = 1
                float inputs:moisture_mask = 0
                float inputs:moisture_roughness = 1
                float inputs:refractive_index = 1.4
                float inputs:roughness = 0.3
                color3f inputs:scattering_color = (0.65, 0.65, 0.65)
                float inputs:scattering_radius = 0.5
                string inputs:specular_model = "GGX"
                token outputs:surface
                uniform float2 ui:nodegraph:node:pos = (3.30975, -0.728985)
            }
        }
    }
}
