
#usda 1.0
(
    defaultPrim = "wolf"
    doc = """Generated from Composed Stage of root layer /studio/badguys/shdw_surf/lib/asset/char/wolf/wolf.usd
"""
)

def Xform "wolf" (
    assetInfo = {
        string name = "char/wolf"
    }
    assetType = "char"
    kind = "assembly"
)
{
    def Scope "skin" (
        assetInfo = {
            string name = "char/wolf/skin_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "skin_0"
        custom string scalp = "skin_0"

        def Scope "Looks"
        {
            def Material "mouth_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.11.2.0", "moonshine-7.17"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/skin/Looks/mouth_mtl/DwaSkinMaterial1_moonray.outputs:surface>

                def Shader "DwaSkinMaterial1_moonray"
                {
                    uniform token info:id = "DwaSkinMaterial"
                    float3 inputs:albedo.connect = </wolf/skin/Looks/mouth_mtl/ColorCorrectHsvMap1_moonray.outputs:out>
                    string inputs:diffuse_transmission_blending_behavior = "RGB"
                    bool inputs:enable_sss_input_normal = 1
                    token inputs:input_normal.connect = </wolf/skin/Looks/mouth_mtl/nml_moonray.outputs:out>
                    float inputs:refractive_index = 1.4
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/skin/Looks/mouth_mtl/rgh_moonray.outputs:out>
                    color3f inputs:scattering_color = (1, 0.28399998, 0.28399998)
                    float inputs:scattering_radius = 0.5
                    string inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (6.55941, 0.809715)
                }

                def Shader "msk_skin_ss_radius_moonray"
                {
                    uniform token info:id = "ImageMap"
                    string inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/msk_skin_ss_radius/msk_skin_ss_radius.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    uniform float2 ui:nodegraph:node:pos = (-3.44806, 1.30472)
                }

                def Shader "nml_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/nml/nml.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.97878, 3.33269)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/skin/Looks/mouth_mtl/clr_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.823854, -0.91829)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.87662, -0.382062)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.1047, -2.55511)
                }
            }

            def Material "skin_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.11.2.0", "moonshine-7.17"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/skin/Looks/skin_mtl/DwaSkinMaterial1_moonray.outputs:surface>

                def Shader "DwaSkinMaterial1_moonray"
                {
                    uniform token info:id = "DwaSkinMaterial"
                    float3 inputs:albedo.connect = </wolf/skin/Looks/skin_mtl/ColorCorrectHsvMap1_moonray.outputs:out>
                    string inputs:diffuse_transmission_blending_behavior = "RGB"
                    token inputs:extra_aovs.connect = </wolf/skin/Looks/skin_mtl/aov_list_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/skin/Looks/skin_mtl/nml_moonray.outputs:out>
                    float inputs:refractive_index = 1.35
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/skin/Looks/skin_mtl/LayerMap2_moonray.outputs:out>
                    string inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (17.0082, 2.30091)
                }

                def Shader "msk_lipline_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/msk_lipline/msk_lipline.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.41237, 9.97121)
                }

                def Shader "ExtraAovMap_msk_monkey_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/skin/Looks/skin_mtl/msk_monkey_moonray.outputs:out>
                    string inputs:label = "U_monkey_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.00117, 11.412)
                }

                def Shader "msk_monkey_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/msk_monkey/msk_monkey.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.41237, 11.412)
                }

                def Shader "ExtraAovMap_msk_lipline_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/skin/Looks/skin_mtl/msk_lipline_moonray.outputs:out>
                    string inputs:label = "U_lipline_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.00117, 9.97121)
                }

                def Shader "aov_list_moonray"
                {
                    uniform token info:id = "ListMap"
                    token inputs:map0.connect = </wolf/skin/Looks/skin_mtl/ExtraAovMap_msk_lipline_moonray.outputs:out>
                    token inputs:map2.connect = </wolf/skin/Looks/skin_mtl/ExtraAovMap_msk_monkey_moonray.outputs:out>
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (11.3475, 10.432)
                }

                def Shader "nose_spec_front_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.75, 0.75, 0.75)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.07653, -0.675525)
                }

                def Shader "nose_color_front_facing_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.008, 0.0032, 0.00576)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.83679, 4.75591)
                }

                def Shader "LayerMap4_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/skin/Looks/skin_mtl/LayerMap3_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/skin/Looks/skin_mtl/clr_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/skin/Looks/skin_mtl/msk_nose_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.997447, 3.77591)
                }

                def Shader "msk_nose_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/msk_nose/msk_nose.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.07653, 2.12005)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.69511, 6.36355)
                }

                def Shader "LayerMap3_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/skin/Looks/skin_mtl/clr_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/skin/Looks/skin_mtl/nose_color_front_facing_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/skin/Looks/skin_mtl/DirectionalMap4_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.81711, 3.18628)
                }

                def Shader "DirectionalMap4_moonray"
                {
                    uniform token info:id = "DirectionalMap"
                    color3f inputs:color_a = (0.3, 0.3, 0.3)
                    string inputs:falloff_type = "linear"
                    float inputs:smoothstep_end = 0.5
                    float inputs:smoothstep_start = 0
                    bool inputs:use_smoothstep = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.69511, 1.61653)
                }

                def Shader "LayerMap2_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/skin/Looks/skin_mtl/LayerMap1_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/skin/Looks/skin_mtl/rgh_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/skin/Looks/skin_mtl/msk_nose_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.85571, 0.636531)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.07653, 0.786531)
                }

                def Shader "LayerMap1_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/skin/Looks/skin_mtl/rgh_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/skin/Looks/skin_mtl/nose_spec_front_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/skin/Looks/skin_mtl/DirectionalMap3_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.62657, -0.343469)
                }

                def Shader "DirectionalMap3_moonray"
                {
                    uniform token info:id = "DirectionalMap"
                    color3f inputs:color_a = (0.5, 0.5, 0.5)
                    string inputs:falloff_type = "linear"
                    float inputs:smoothstep_end = 0.5
                    float inputs:smoothstep_start = 0
                    bool inputs:use_smoothstep = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.95152, -3.53774)
                }

                def Shader "msk_skin_ss_radius_moonray"
                {
                    uniform token info:id = "ImageMap"
                    string inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/msk_skin_ss_radius/msk_skin_ss_radius.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    uniform float2 ui:nodegraph:node:pos = (-2.07653, -4.87881)
                }

                def Shader "nml_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/skin_0/default/textures/nml/nml.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.627, 6.99887)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/skin/Looks/skin_mtl/LayerMap4_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.91252, 4.58299)
                }
            }

            def Material "teeth_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.11.2.0", "moonshine-7.17"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/skin/Looks/teeth_mtl/teeth_moonray.outputs:surface>

                def Shader "teeth_moonray"
                {
                    uniform token info:id = "DwaSkinMaterial"
                    color3f inputs:albedo = (0.6, 0.6, 0.6)
                    string inputs:diffuse_transmission_blending_behavior = "RGB"
                    bool inputs:enable_sss_input_normal = 1
                    float inputs:moisture_mask = 0
                    float inputs:moisture_roughness = 1
                    float inputs:refractive_index = 1.4
                    float inputs:roughness = 0.3
                    color3f inputs:scattering_color = (0.65, 0.65, 0.65)
                    float inputs:scattering_radius = 0.5
                    string inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (3.30975, -0.728985)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/skin/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/skin/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/skin/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/skin/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/skin/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/skin/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/skin/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/skin/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "skin_0"
            {
                custom float moonray:adaptive_error = 4
                custom int moonray:curved_motion_blur_sample_count = 2
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/skin_0//alembic/skin_0.abc@
                uniform token purpose = "render"

                over "m_logum"
                {
                    rel material:binding = </wolf/skin/Looks/mouth_mtl>
                }

                over "m_tongue"
                {
                    rel material:binding = </wolf/skin/Looks/mouth_mtl>
                }

                over "m_skin"
                {
                    over "m_inmouth"
                    {
                        rel material:binding = </wolf/skin/Looks/mouth_mtl>
                    }

                    over "l_arm"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_cheek"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_ear"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_eyelid"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_foot"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_hand"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_index"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_leg"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_middle"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_pinky"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_thumb"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_toeindex"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_toemiddle"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_toepinky"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "l_toethumb"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_back"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_backhead"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_brow"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_chest"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_chin"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_lolip"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_neck"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_nose"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_snout"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "m_uplip"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_arm"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_cheek"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_ear"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_eyelid"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_foot"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_hand"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_index"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_leg"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_middle"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_pinky"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_thumb"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_toeindex"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_toemiddle"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_toepinky"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }

                    over "r_toethumb"
                    {
                        rel material:binding = </wolf/skin/Looks/skin_mtl>
                    }
                }

                over "m_upgum"
                {
                    rel material:binding = </wolf/skin/Looks/mouth_mtl>
                }

                over "l_indexnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_middlenail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_middletoenail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_pinkynail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_thumbnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_toeindexnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_toepinkynail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_toethumbnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_indexnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_middlenail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_middletoenail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_pinkynail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_thumbnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_toeindexnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_toepinkynail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "r_toethumbnail"
                {
                    rel material:binding = </wolf/skin/Looks/skin_mtl>
                }

                over "l_lotooth1"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "l_lotooth2"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "l_lotooth3"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "l_uptooth1"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "l_uptooth2"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "l_uptooth3"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "m_lotooth"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "m_uptooth"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "r_lotooth1"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "r_lotooth2"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "r_lotooth3"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "r_uptooth1"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "r_uptooth2"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }

                over "r_uptooth3"
                {
                    rel material:binding = </wolf/skin/Looks/teeth_mtl>
                }
            }
        }
    }

    def Scope "bodyhair" (
        assetInfo = {
            string name = "char/wolf/bodyhair_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "bodyhair_0"

        def Scope "Looks"
        {
            def Material "hair_ss_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.0.4.0", "moonshine-7.30"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/bodyhair/Looks/hair_ss_mtl/DwaSolidDielectricMtl_for_hair_moonray.outputs:surface>

                def Shader "DwaSolidDielectricMtl_for_hair_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/bodyhair/Looks/hair_ss_mtl/ColorCorrectHsvMap2_moonray.outputs:out>
                    token inputs:bssrdf = "dipole"
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:diffuse_transmission_color.connect = </wolf/bodyhair/Looks/hair_ss_mtl/ColorCorrectHsvMap2_moonray.outputs:out>
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.85
                    float inputs:scattering_radius = 1
                    float inputs:scattering_radius.connect = </wolf/bodyhair/Looks/hair_ss_mtl/LayerMap_ss_rds_moonray.outputs:out>
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (12.9632, 7.83054)
                }

                def Shader "ColorCorrectHsvMap2_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/bodyhair/Looks/hair_ss_mtl/hair_texture_map_moonray.outputs:out>
                    float inputs:value_factor = 1.3
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.43867, 5.26856)
                }

                def Shader "hair_texture_map_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/bodyhair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/clr_hair_ss/clr_hair_ss.<UDIM>.tx@
                    token inputs:texture_coordinates = "hair surface"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.07333, 5.67026)
                }

                def Shader "lower_radius_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.25, 0.25, 0.25)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.53105, 10.3078)
                }

                def Shader "higher_radius_for_neck_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.53105, 9.04054)
                }

                def Shader "LayerMap_ss_rds_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/bodyhair/Looks/hair_ss_mtl/higher_radius_for_neck_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/bodyhair/Looks/hair_ss_mtl/lower_radius_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/bodyhair/Looks/hair_ss_mtl/msk_ss_rds_neck_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.27722, 10.1578)
                }

                def Shader "msk_ss_rds_neck_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/bodyhair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_ss_rds_neck/msk_ss_rds_neck.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.53105, 11.6087)
                }

                def Shader "model_uv1_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "surface_st"
                    token inputs:primitive_attribute_type = "vec2f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.19174, 6.39856)
                }

                def Shader "hair_color_map_ss_moonray"
                {
                    uniform token info:id = "HairMap"
                    float3 inputs:base_color.connect = </wolf/bodyhair/Looks/hair_ss_mtl/hair_texture_map_moonray.outputs:out>
                    float inputs:bias = 0.99
                    float3 inputs:tip_color.connect = </wolf/bodyhair/Looks/hair_ss_mtl/clr_hair_tip_ss_moonray.outputs:out>
                    uniform float2 ui:nodegraph:node:pos = (8.60967, 8.04313)
                }

                def Shader "clr_hair_tip_ss_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/bodyhair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/clr_hair_tip_ss/clr_hair_tip_ss.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.07333, 7.54925)
                }
            }

            def Material "MtlLib_Hair" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.0.4.0", "moonshine-7.30"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/bodyhair/Looks/MtlLib_Hair/wolf_hair_mtl1_moonray.outputs:surface>

                def Shader "wolf_hair_mtl1_moonray"
                {
                    uniform token info:id = "HairMaterial_v3"
                    bool inputs:casts_caustics = 1
                    float inputs:cuticle_layer_thickness = 10
                    token inputs:fresnel_type = "simple longitudinal"
                    float3 inputs:hair_color.connect = </wolf/bodyhair/Looks/MtlLib_Hair/hair_color_map_moonray.outputs:out>
                    float inputs:independent_secondary_specular_roughness = 0.3
                    float inputs:independent_transmission_roughness = 1
                    float inputs:primary_specular_offset = 0
                    float inputs:refractive_index = 1.5
                    float inputs:secondary_specular_offset = -5
                    bool inputs:use_independent_secondary_specular_roughness = 1
                    bool inputs:use_independent_transmission_roughness = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (-4.9849, -10.9759)
                }

                def Shader "ColorCorrectMap_trans_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:clamp = 0
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 4
                    bool inputs:gain_offset_enabled = 0
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/bodyhair/Looks/MtlLib_Hair/hair_color_map_moonray.outputs:out>
                    float inputs:saturation = 0.05
                    float inputs:saturation_b = 0.8
                    float inputs:saturation_g = 0.8
                    float inputs:saturation_r = 0.7
                    bool inputs:TMI_enabled = 0
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.49351, -1.15674)
                }

                def Shader "hair_color_map_moonray"
                {
                    uniform token info:id = "HairMap"
                    float3 inputs:base_color.connect = </wolf/bodyhair/Looks/MtlLib_Hair/hair_texture_map_moonray.outputs:out>
                    float3 inputs:tip_color.connect = </wolf/bodyhair/Looks/MtlLib_Hair/hair_texture_map_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-8.32936, -8.90421)
                }

                def Shader "ColorCorrectMap_albedo_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 2.2
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/bodyhair/Looks/MtlLib_Hair/hair_color_map_moonray.outputs:out>
                    float inputs:offset_b = 0
                    float inputs:offset_g = 0
                    float inputs:offset_r = 0
                    float inputs:saturation_b = 0.8
                    bool inputs:saturation_enabled = 0
                    float inputs:saturation_g = 0.8
                    float inputs:saturation_r = 0.7
                    bool inputs:TMI_enabled = 0
                    bool inputs:use_per_channel_saturation = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.60411, -3.9294)
                }

                def Shader "DwaSolidDielectricMtl_for_hair_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/bodyhair/Looks/MtlLib_Hair/ColorCorrectMap_albedo_moonray.outputs:out>
                    token inputs:bssrdf = "dipole"
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:diffuse_transmission_color.connect = </wolf/bodyhair/Looks/MtlLib_Hair/ColorCorrectMap_trans_moonray.outputs:out>
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.85
                    float inputs:scattering_radius = 0.5
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    uniform float2 ui:nodegraph:node:pos = (-2.64201, -2.36674)
                }

                def Shader "model_uv_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "model_uv"
                    token inputs:primitive_attribute_type = "vec3f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-14.0212, -8.67921)
                }

                def Shader "hair_texture_map_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/bodyhair/Looks/MtlLib_Hair/model_uv_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/clr_hair/clr_hair.<UDIM>.tx@
                    token inputs:texture_coordinates = "hair surface"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-11.5292, -8.67921)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/bodyhair/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/bodyhair/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/bodyhair/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/bodyhair/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/bodyhair/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/bodyhair/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/bodyhair/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/bodyhair/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def Procedural "hair_set"
            {
                custom float procedural:base_width_factor = 3.5
                uniform token procedural:class = "WillowGeometry_v2"
                custom float procedural:density_factor = 0.8
                custom asset procedural:hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/bodyhair_0/body_0/bodyhair_0.hair@
                custom asset procedural:reference_hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/bodyhair_0/body_0/bodyhair_0.hair@
                custom int procedural:refine_level = 2
                custom token procedural:remove_curve_sets_pattern = "*core*"
                custom int procedural:thread_chunk_size = 5000
                uniform token purpose = "render"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def GeomSubset "default"
                {
                    rel material:binding = </wolf/bodyhair/Looks/hair_ss_mtl>
                }
            }
        }
    }

    def Scope "browhair" (
        assetInfo = {
            string name = "char/wolf/browhair_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "browhair_0"
        custom string scalp = "browhair_0"

        def Scope "Looks"
        {
            def Material "eyebrow_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.7.3.0", "moonshine-7.13"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/browhair/Looks/eyebrow_mtl/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    color3f inputs:albedo = (0.004, 0.004, 0.004)
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    float inputs:roughness = 1
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_specular = 0
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/browhair/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/browhair/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/browhair/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/browhair/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/browhair/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/browhair/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/browhair/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/browhair/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "browhair_0"
            {
                rel material:binding = </wolf/browhair/Looks/eyebrow_mtl>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/browhair_0/head_0/alembic/browhair_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "eyecircles" (
        assetInfo = {
            string name = "char/wolf/eyecircles_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "eyecircles_0"
        custom string scalp = "eyecircles_0"

        def Scope "Looks"
        {
            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.15.4.0", "moonshine-7.21"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/eyecircles/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    color3f inputs:albedo = (0.004, 0.004, 0.004)
                    float inputs:clearcoat = 0
                    string inputs:diffuse_transmission_blending_behavior = "RGB"
                    float inputs:roughness = 1
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_specular = 0
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/eyecircles/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyecircles/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyecircles/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyecircles/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyecircles/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/eyecircles/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/eyecircles/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/eyecircles/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "eyecircles_0"
            {
                rel material:binding = </wolf/eyecircles/Looks/dwa_solid_dielectric>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/eyecircles_0/head_0/alembic/eyecircles_0.abc@
                custom bool moonray:visible_diffuse_reflection = 0
                custom bool moonray:visible_diffuse_transmission = 0
                custom bool moonray:visible_glossy_reflection = 0
                custom bool moonray:visible_glossy_transmission = 0
                custom bool moonray:visible_mirror_reflection = 0
                custom bool moonray:visible_mirror_transmission = 0
                custom bool moonray:visible_shadow = 0
                custom bool moonray:visible_volume = 0
                uniform token purpose = "render"
            }
        }
    }

    def Scope "eyeline" (
        assetInfo = {
            string name = "char/wolf/eyeline_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "eyeline_0"
        custom string scalp = "eyeline_0"

        def Scope "Looks"
        {
            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.3.3.0", "moonshine-7.8"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/eyeline/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    color3f inputs:albedo = (0.004, 0.004, 0.004)
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    float inputs:roughness = 1
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_specular = 0
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/eyeline/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyeline/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyeline/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyeline/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyeline/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/eyeline/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/eyeline/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/eyeline/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "eyeline_0"
            {
                rel material:binding = </wolf/eyeline/Looks/dwa_solid_dielectric>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/eyeline_0/head_0/alembic/eyeline_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "glasses" (
        assetInfo = {
            string name = "char/wolf/glasses_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "glasses_0"
        custom string scalp = "glasses_0"

        def Scope "Looks"
        {
            def Material "shade_glass" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.20.1.0", "moonshine-7.27"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/glasses/Looks/shade_glass/DwaBaseMaterial1_moonray.outputs:surface>

                def Shader "Glasses_Opaque_Switch_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    float3 inputs:input0.connect = </wolf/glasses/Looks/shade_glass/Transmission_ON2_moonray.outputs:out>
                    float3 inputs:input1.connect = </wolf/glasses/Looks/shade_glass/Transmission_OFF_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.52465, 6.20204)
                }

                def Shader "Transmission_ON2_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.779, 0.6251838, 0.41131198)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.31724, 7.8352)
                }

                def Shader "Transmission_OFF_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0, 0, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.31724, 6.23327)
                }

                def Shader "Glasses_MTL_Switch_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    float3 inputs:input0.connect = </wolf/glasses/Looks/shade_glass/MTL_OFF_moonray.outputs:out>
                    float3 inputs:input1.connect = </wolf/glasses/Looks/shade_glass/MTL_ON_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.52465, 3.29593)
                }

                def Shader "MTL_OFF_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0, 0, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.31724, 4.15668)
                }

                def Shader "MTL_ON_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.31724, 2.92931)
                }

                def Shader "DwaBaseMaterial1_moonray"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/glasses/Looks/shade_glass/clr_moonray.outputs:out>
                    float inputs:input_normal_dial = 0.01
                    float inputs:metallic = 1
                    float inputs:metallic.connect = </wolf/glasses/Looks/shade_glass/Glasses_MTL_Switch_moonray.outputs:out>
                    float3 inputs:metallic_color.connect = </wolf/glasses/Looks/shade_glass/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/glasses/Looks/shade_glass/rgh_remap_moonray.outputs:out>
                    bool inputs:thin_geometry = 1
                    float inputs:transmission = 1
                    float3 inputs:transmission_color.connect = </wolf/glasses/Looks/shade_glass/Glasses_Opaque_Switch_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (0.443885, 0.659402)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float inputs:hue_shift = -10
                    float3 inputs:input.connect = </wolf/glasses/Looks/shade_glass/clr_moonray.outputs:out>
                    float inputs:value_factor = 0.6
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.52465, 0.856155)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/glasses_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.31724, 1.00615)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/glasses/Looks/shade_glass/rgh_moonray.outputs:out>
                    float inputs:output_max = 0.01
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.52465, -1.05171)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/glasses_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.31724, -1.05171)
                }
            }

            def Material "metal" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.20.1.0", "moonshine-7.27"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/glasses/Looks/metal/DwaBaseMaterial1_moonray.outputs:surface>

                def Shader "DwaBaseMaterial1_moonray"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    color3f inputs:albedo = (0.448, 0.448, 0.448)
                    float inputs:metallic = 1
                    color3f inputs:metallic_color = (0.53, 0.53, 0.53)
                    float inputs:roughness = 0.062
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (4.98037, 2.75856)
                }
            }

            def Material "frames" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.20.1.0", "moonshine-7.27"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/glasses/Looks/frames/DwaRefractiveMaterial1_moonray.outputs:surface>

                def Shader "DwaRefractiveMaterial1_moonray"
                {
                    uniform token info:id = "DwaRefractiveMaterial"
                    float inputs:independent_transmission_refractive_index = 1
                    float inputs:roughness = 0.1
                    token inputs:specular_model = "GGX"
                    float3 inputs:transmission_color.connect = </wolf/glasses/Looks/frames/BlendMap1_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (5.41628, 2.59253)
                }

                def Shader "BlendMap1_moonray"
                {
                    uniform token info:id = "BlendMap"
                    float inputs:blend_amount = 1
                    float inputs:blend_amount.connect = </wolf/glasses/Looks/frames/RemapMap1_moonray.outputs:out>
                    color3f inputs:color_A = (1, 0.60024, 0.21100003)
                    color3f inputs:color_B = (0.038, 0.012958, 0.012958)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.4281, 6.70843)
                }

                def Shader "RemapMap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/glasses/Looks/frames/NoiseWorleyMap1_moonray.outputs:out>
                    float inputs:input_max = 0.87
                    float inputs:input_min = 0.55
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.0176575, 7.0421)
                }

                def Shader "NoiseWorleyMap1_moonray"
                {
                    uniform token info:id = "NoiseWorleyMap_v2"
                    color3f inputs:color_A = (1, 1, 1)
                    color3f inputs:color_B = (0, 0, 0)
                    float inputs:F4 = 0.3
                    float inputs:frequency = 3
                    vector3f inputs:scale = (9.9, 9.9, 9.9)
                    token inputs:space = "texture"
                    bool inputs:use_smoothstep = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.27358, 7.0421)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/glasses/Looks/frames/clr_moonray.outputs:out>
                    float inputs:value_factor = 3
                    uniform float2 ui:nodegraph:node:pos = (2.76954, 2.85818)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/glasses_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.0273546, 2.85818)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/glasses/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/glasses/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/glasses/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/glasses/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/glasses/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/glasses/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/glasses/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/glasses/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "glasses_glass"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/glasses_0/head_0/alembic/glasses_0.abc@
                custom bool moonray:visible_shadow = 0
                uniform token purpose = "render"

                over "l_lens_USDOFF"
                {
                    rel material:binding = </wolf/glasses/Looks/shade_glass>
                }

                over "r_lens_USDOFF"
                {
                    rel material:binding = </wolf/glasses/Looks/shade_glass>
                }
            }

            def "glasses_0"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/glasses_0/head_0/alembic/glasses_0.abc@
                uniform token purpose = "render"

                over "m_frames2"
                {
                    rel material:binding = </wolf/glasses/Looks/metal>
                }

                over "m_frames1"
                {
                    rel material:binding = </wolf/glasses/Looks/frames>
                }
            }
        }
    }

    def Scope "hair" (
        assetInfo = {
            string name = "char/wolf/hair_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "hair_0"

        def Scope "Looks"
        {
            def Material "guard_hair_ss_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.9.1.0", "moonshine-7.38"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/hair/Looks/guard_hair_ss_mtl/DwaSolidDielectricMtl_for_hair2_moonray.outputs:surface>

                def Shader "DwaSolidDielectricMtl_for_hair2_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/hair/Looks/guard_hair_ss_mtl/exp_lines_CC_mask_moonray.outputs:out>
                    token inputs:bssrdf = "dipole"
                    float inputs:diffuse_transmission = 0.8
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:diffuse_transmission_color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/exp_lines_CC_mask_moonray.outputs:out>
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:extra_aovs.connect = </wolf/hair/Looks/guard_hair_ss_mtl/aov_list_moonray.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 1
                    bool inputs:show_emission = 1
                    float inputs:specular = 0.0001
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (47.0727, -5.66322)
                }

                def Shader "blush_vdb_moonray"
                {
                    uniform token info:id = "OpenVdbMap"
                    uniform float2 ui:nodegraph:node:pos = (21.2807, 7.07459)
                }

                def Shader "msk_blush_blob_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_blush_blob/msk_blush_blob.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.2807, 5.50768)
                }

                def Shader "model_uv1_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "surface_st"
                    token inputs:primitive_attribute_type = "vec2f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (17.5645, -4.40347)
                }

                def Shader "ExtraAovMap_msk_blush_line_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/msk_blush_blob_moonray.outputs:out>
                    string inputs:label = "U_blush_line_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.8309, 6.58202)
                }

                def Shader "ExtraAovMap_msk_blush_blob_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/msk_blush_blob_moonray.outputs:out>
                    string inputs:label = "U_blush_blob_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.8309, 5.32393)
                }

                def Shader "ExtraAovMap_msk_chin_area_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/msk_trans_chin_moonray.outputs:out>
                    string inputs:label = "U_chin_area_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, 3.6487)
                }

                def Shader "msk_trans_chin_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_trans_chin/msk_trans_chin.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.2807, 3.78365)
                }

                def Shader "ExtraAovMap_msk_lipline_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/msk_lipline_moonray.outputs:out>
                    string inputs:label = "U_lipline_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, 2.23611)
                }

                def Shader "msk_lipline_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_lipline/msk_lipline.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.398, 2.27603)
                }

                def Shader "ExtraAovMap_msk_monkey_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/msk_monkey_moonray.outputs:out>
                    string inputs:label = "U_monkey_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, 0.968768)
                }

                def Shader "msk_monkey_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_monkey/msk_monkey.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.398, 1.08116)
                }

                def Shader "ColorCorrectHsvMap3_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/guard_hair_ss_mtl/clr_hair_ss_moonray.outputs:out>
                    float inputs:value_factor = 0.8
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (23.9416, -7.49681)
                }

                def Shader "clr_hair_ss_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/clr_hair_ss/clr_hair_ss.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.1055, -7.56566)
                }

                def Shader "aov_list_moonray"
                {
                    uniform token info:id = "ListMap"
                    token inputs:map0.connect = </wolf/hair/Looks/guard_hair_ss_mtl/aov_mask_moonray.outputs:out>
                    token inputs:map1.connect = </wolf/hair/Looks/guard_hair_ss_mtl/aov_id_moonray.outputs:out>
                    token inputs:map2.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ExtraAovMap_msk_nose_lines_moonray.outputs:out>
                    token inputs:map3.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ExtraAovMap_msk_monkey_moonray.outputs:out>
                    token inputs:map4.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ExtraAovMap_msk_lipline_moonray.outputs:out>
                    token inputs:map5.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ExtraAovMap_msk_chin_area_moonray.outputs:out>
                    token inputs:map6.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ExtraAovMap_msk_blush_blob_moonray.outputs:out>
                    token inputs:map7.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ExtraAovMap_msk_blush_line_moonray.outputs:out>
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (43.0963, -3.57347)
                }

                def Shader "exp_lines_CC_mask_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 0.3
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/hair/Looks/guard_hair_ss_mtl/ColorCorrectHsvMap3_moonray.outputs:out>
                    float3 inputs:mix.connect = </wolf/hair/Looks/guard_hair_ss_mtl/exp_lines_mask_gain_moonray.outputs:out>
                    float inputs:saturation = 1.1
                    bool inputs:TMI_enabled = 0
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (42.309, -7.49681)
                }

                def Shader "ExtraAovMap_msk_nose_lines_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/msk_nose_lines_moonray.outputs:out>
                    string inputs:label = "U_nose_line_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, -0.301761)
                }

                def Shader "msk_nose_lines_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_nose_lines/msk_nose_lines.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.5197, -0.179105)
                }

                def Shader "exp_lines_mask_gain_moonray"
                {
                    uniform token info:id = "OpMap"
                    bool inputs:clamp = 1
                    float3 inputs:op1.connect = </wolf/hair/Looks/guard_hair_ss_mtl/exp_lines_mask_vdb_moonray.outputs:out>
                    float inputs:op1_factor = 3
                    token inputs:operation = "op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, -5.94821)
                }

                def Shader "exp_lines_mask_vdb_moonray"
                {
                    uniform token info:id = "OpenVdbMap"
                    string inputs:grid_name = "density"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/P_noise_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/usd/\${a_shot_fxtmpdata_dir}/light/lines/expression.205.vdb@
                    token inputs:texture_coordinates = "input texture coordinates"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (37.3395, -3.57347)
                }

                def Shader "P_noise_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/guard_hair_ss_mtl/P_world_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/hair/Looks/guard_hair_ss_mtl/neg1_to_1_moonray.outputs:out>
                    float inputs:op2_factor = 0.03
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (34.8899, -2.99904)
                }

                def Shader "aov_mask_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/exp_lines_mask_vdb_moonray.outputs:out>
                    string inputs:label = "U_exp_line_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, -3.57347)
                }

                def Shader "aov_id_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/guard_hair_ss_mtl/expression_lines_id_vdb_moonray.outputs:out>
                    string inputs:label = "U_exp_line_id"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.9596, -1.86904)
                }

                def Shader "expression_lines_id_vdb_moonray"
                {
                    uniform token info:id = "OpenVdbMap"
                    string inputs:grid_name = "line_id"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/guard_hair_ss_mtl/P_noise_moonray.outputs:out>
                    token inputs:interpolation = "point"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/usd/\${a_shot_fxtmpdata_dir}/light/lines/expression.205.vdb@
                    token inputs:texture_coordinates = "input texture coordinates"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (37.3395, -1.86904)
                }

                def Shader "P_world_moonray"
                {
                    uniform token info:id = "TransformSpaceMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/guard_hair_ss_mtl/P_render_moonray.outputs:out>
                    token inputs:input_type = "point"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (32.5439, -3.67904)
                }

                def Shader "neg1_to_1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/guard_hair_ss_mtl/NoiseMap1_moonray.outputs:out>
                    float inputs:op1_factor = 2
                    token inputs:operation = "subtract"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (32.5439, -2.16904)
                }

                def Shader "P_render_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:map_type = "position"
                    string inputs:primitive_attribute_name = "ref_P"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (30.3476, -3.67904)
                }

                def Shader "NoiseMap1_moonray"
                {
                    uniform token info:id = "NoiseMap_v2"
                    bool inputs:color = 1
                    float inputs:frequency_multiplier = 150
                    float inputs:lacunarity = 1.92
                    float inputs:max_level = 3
                    token inputs:space = "texture"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (30.3476, -2.16904)
                }
            }

            def Material "hair_ss_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.9.1.0", "moonshine-7.38"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/hair/Looks/hair_ss_mtl/DwaSolidDielectricMtl_for_hair_moonray.outputs:surface>

                def Shader "DwaSolidDielectricMtl_for_hair_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/hair/Looks/hair_ss_mtl/exp_lines_CC_mask_moonray.outputs:out>
                    token inputs:bssrdf = "dipole"
                    float3 inputs:diffuse_transmission.connect = </wolf/hair/Looks/hair_ss_mtl/LayerMap_transmission1_moonray.outputs:out>
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:diffuse_transmission_color.connect = </wolf/hair/Looks/hair_ss_mtl/exp_lines_CC_mask_moonray.outputs:out>
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:extra_aovs.connect = </wolf/hair/Looks/hair_ss_mtl/aov_list_moonray.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.85
                    float inputs:scattering_radius = 1
                    float inputs:scattering_radius.connect = </wolf/hair/Looks/hair_ss_mtl/LayerMap_ss_rds2_moonray.outputs:out>
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (47.4944, -7.73141)
                }

                def Shader "blush_color_adjust_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/hair_ss_mtl/ConstantColorMap3_moonray.outputs:out>
                    float inputs:value_factor = 1.4
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (35.3062, -13.0752)
                }

                def Shader "ConstantColorMap3_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.188, 0.027720602, 0.025004001)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (33.1939, -13.0752)
                }

                def Shader "blob_intensity_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/hair_ss_mtl/msk_blush_blob_sq670_s202_moonray.outputs:out>
                    float inputs:op1_factor = 0.7
                    token inputs:operation = "op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (30.2794, -13.2252)
                }

                def Shader "msk_blush_blob_sq670_s202_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_blush_blob_sq670_s202/msk_blush_blob_sq670_s202.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (27.0951, -13.2252)
                }

                def Shader "msk_blush_lines_sq670_s202_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_blush_lines_sq670_s202/msk_blush_lines_sq670_s202.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (27.0951, -9.73988)
                }

                def Shader "model_uv1_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "surface_st"
                    token inputs:primitive_attribute_type = "vec2f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.58991, 1.13904)
                }

                def Shader "ExtraAovMap_msk_blush_line_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/blush_vdb_lines_moonray.outputs:out>
                    string inputs:label = "U_blush_line_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.688, 5.13736)
                }

                def Shader "blush_vdb_lines_moonray"
                {
                    uniform token info:id = "OpenVdbMap"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (27.0951, -11.1744)
                }

                def Shader "ExtraAovMap_msk_blush_blob_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/msk_blush_blob_sq670_s202_moonray.outputs:out>
                    string inputs:label = "U_blush_blob_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.688, 3.99279)
                }

                def Shader "lines_intensity_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/hair_ss_mtl/blush_vdb_lines_moonray.outputs:out>
                    float inputs:op1_factor = 0.8
                    float3 inputs:op2.connect = </wolf/hair/Looks/hair_ss_mtl/msk_blush_lines_sq670_s202_moonray.outputs:out>
                    float inputs:op2_factor = 0
                    token inputs:operation = "op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (30.2794, -10.4944)
                }

                def Shader "lines_over_blob_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/lines_intensity_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/blob_intensity_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/lines_intensity_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (32.8067, -11.2333)
                }

                def Shader "ExtraAovMap_msk_chin_area_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/msk_trans_chin_moonray.outputs:out>
                    string inputs:label = "U_chin_area_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, 2.49679)
                }

                def Shader "msk_trans_chin_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_trans_chin/msk_trans_chin.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.00495, 8.79934)
                }

                def Shader "chin_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/cc_chin_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/tip_areas_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_trans_chin_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (20.1966, -4.72425)
                }

                def Shader "tip_areas_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/base_tip_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/ColorCorrectHsvMap2_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_head_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.4723, -4.57425)
                }

                def Shader "cc_chin_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/hair_ss_mtl/clr_hair_ss_moonray.outputs:out>
                    float inputs:saturation_factor = 0.8
                    float inputs:value_factor = 1.4
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (17.7896, -6.90575)
                }

                def Shader "clr_hair_ss_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/clr_hair_ss/clr_hair_ss.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.0904, -4.09415)
                }

                def Shader "less_transmission_chin_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.5, 0.5, 0.5)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.7483, 7.95262)
                }

                def Shader "LayerMap_transmission1_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/less_transmission_chin_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/LayerMap_transmission_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_trans_chin_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.9561, 10.8467)
                }

                def Shader "LayerMap_transmission_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/less_transmission_neck1_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/full_transmission_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_ss_rds_neck_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.2309, 9.62934)
                }

                def Shader "LayerMap8_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/blush_color_adjust_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/nose_lines_layer_map_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/blush_switch_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (37.804, -12.2133)
                }

                def Shader "blush_switch_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/hair_ss_mtl/lines_over_blob_moonray.outputs:out>
                    float inputs:op1_factor = 0
                    token inputs:operation = "op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (35.3062, -11.2333)
                }

                def Shader "nose_lines_layer_map_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/nose_lines_color_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/chin_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_nose_lines_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (23.8746, -11.8706)
                }

                def Shader "ExtraAovMap_msk_lipline_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/msk_lipline_moonray.outputs:out>
                    string inputs:label = "U_lipline_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, 1.21404)
                }

                def Shader "msk_lipline_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_lipline/msk_lipline.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (7.88331, 0.88084)
                }

                def Shader "ExtraAovMap_msk_monkey_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/msk_monkey_moonray.outputs:out>
                    string inputs:label = "U_monkey_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, -0.0230362)
                }

                def Shader "msk_monkey_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_monkey/msk_monkey.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (7.88331, -0.31403)
                }

                def Shader "msk_ss_rds_neck_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_ss_rds_neck/msk_ss_rds_neck.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (7.88331, 5.25334)
                }

                def Shader "full_transmission_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.8026, 9.26157)
                }

                def Shader "less_transmission_neck1_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.8, 0.8, 0.8)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.951, 7.95262)
                }

                def Shader "ExtraAovMap_msk_nose_lines_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/msk_nose_lines_moonray.outputs:out>
                    string inputs:label = "U_nose_line_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, -1.07084)
                }

                def Shader "msk_nose_lines_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_nose_lines/msk_nose_lines.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.21028, -7.90895)
                }

                def Shader "exp_lines_CC_mask_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 0.3
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/hair/Looks/hair_ss_mtl/LayerMap8_moonray.outputs:out>
                    float3 inputs:mix.connect = </wolf/hair/Looks/hair_ss_mtl/exp_lines_mask_gain_moonray.outputs:out>
                    float inputs:saturation = 1.1
                    bool inputs:TMI_enabled = 0
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (42.5832, -7.31641)
                }

                def Shader "exp_lines_mask_gain_moonray"
                {
                    uniform token info:id = "OpMap"
                    bool inputs:clamp = 1
                    float3 inputs:op1.connect = </wolf/hair/Looks/hair_ss_mtl/exp_lines_mask_vdb_moonray.outputs:out>
                    float inputs:op1_factor = 3
                    token inputs:operation = "op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, -6.71729)
                }

                def Shader "exp_lines_mask_vdb_moonray"
                {
                    uniform token info:id = "OpenVdbMap"
                    string inputs:grid_name = "density"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/P_noise_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/usd/\${a_shot_fxtmpdata_dir}/light/lines/expression.205.vdb@
                    token inputs:texture_coordinates = "input texture coordinates"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (37.1686, -4.34255)
                }

                def Shader "P_noise_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/hair_ss_mtl/P_world_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/hair/Looks/hair_ss_mtl/neg1_to_1_moonray.outputs:out>
                    float inputs:op2_factor = 0.03
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (34.719, -3.76812)
                }

                def Shader "aov_mask_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/exp_lines_mask_vdb_moonray.outputs:out>
                    string inputs:label = "U_exp_line_mask"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, -4.34255)
                }

                def Shader "aov_id_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/hair/Looks/hair_ss_mtl/expression_lines_id_vdb_moonray.outputs:out>
                    string inputs:label = "U_exp_line_id"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (39.7887, -2.63812)
                }

                def Shader "expression_lines_id_vdb_moonray"
                {
                    uniform token info:id = "OpenVdbMap"
                    string inputs:grid_name = "line_id"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/P_noise_moonray.outputs:out>
                    token inputs:interpolation = "point"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/usd/\${a_shot_fxtmpdata_dir}/light/lines/expression.205.vdb@
                    token inputs:texture_coordinates = "input texture coordinates"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (37.1686, -2.63812)
                }

                def Shader "aov_list_moonray"
                {
                    uniform token info:id = "ListMap"
                    token inputs:map0.connect = </wolf/hair/Looks/hair_ss_mtl/aov_mask_moonray.outputs:out>
                    token inputs:map1.connect = </wolf/hair/Looks/hair_ss_mtl/aov_id_moonray.outputs:out>
                    token inputs:map2.connect = </wolf/hair/Looks/hair_ss_mtl/ExtraAovMap_msk_nose_lines_moonray.outputs:out>
                    token inputs:map3.connect = </wolf/hair/Looks/hair_ss_mtl/ExtraAovMap_msk_monkey_moonray.outputs:out>
                    token inputs:map4.connect = </wolf/hair/Looks/hair_ss_mtl/ExtraAovMap_msk_lipline_moonray.outputs:out>
                    token inputs:map5.connect = </wolf/hair/Looks/hair_ss_mtl/ExtraAovMap_msk_chin_area_moonray.outputs:out>
                    token inputs:map6.connect = </wolf/hair/Looks/hair_ss_mtl/ExtraAovMap_msk_blush_blob_moonray.outputs:out>
                    token inputs:map7.connect = </wolf/hair/Looks/hair_ss_mtl/ExtraAovMap_msk_blush_line_moonray.outputs:out>
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (42.9254, -4.34255)
                }

                def Shader "P_world_moonray"
                {
                    uniform token info:id = "TransformSpaceMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/hair_ss_mtl/P_render_moonray.outputs:out>
                    token inputs:input_type = "point"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (32.373, -4.44812)
                }

                def Shader "neg1_to_1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/hair_ss_mtl/NoiseMap1_moonray.outputs:out>
                    float inputs:op1_factor = 2
                    token inputs:operation = "subtract"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (32.373, -2.93812)
                }

                def Shader "P_render_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:map_type = "position"
                    string inputs:primitive_attribute_name = "ref_P"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (30.1767, -4.44812)
                }

                def Shader "NoiseMap1_moonray"
                {
                    uniform token info:id = "NoiseMap_v2"
                    bool inputs:color = 1
                    float inputs:frequency_multiplier = 150
                    float inputs:lacunarity = 1.92
                    float inputs:max_level = 3
                    token inputs:space = "texture"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (30.1767, -2.93812)
                }

                def Shader "nose_lines_color_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.04, 0.0262, 0.021999998)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (21.1811, -12.0299)
                }

                def Shader "LayerMap_ss_rds2_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/lowest_radius_snout_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/LayerMap_ss_rds1_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_ss_rds_snout_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (20.0688, 4.24556)
                }

                def Shader "msk_ss_rds_snout_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_ss_rds_snout/msk_ss_rds_snout.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.00495, 6.90708)
                }

                def Shader "LayerMap_ss_rds1_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/higher_radius_for_neck_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/LayerMap_ss_rds_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_ss_rds_neck_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.951, 4.14)
                }

                def Shader "lowest_radius_snout_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.125, 0.125, 0.125)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.951, 2.64904)
                }

                def Shader "ColorCorrectHsvMap2_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/hair_ss_mtl/clr_hair_ss_moonray.outputs:out>
                    float inputs:value_factor = 1.3
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (12.103, -4.33091)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hair/Looks/hair_ss_mtl/clr_hair_tip_ss_moonray.outputs:out>
                    float inputs:value_factor = 1.4
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (12.103, -5.85425)
                }

                def Shader "clr_hair_tip_ss_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/clr_hair_tip_ss/clr_hair_tip_ss.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.21028, -5.55425)
                }

                def Shader "higher_radius_for_neck_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (14.2393, 2.64904)
                }

                def Shader "LayerMap_ss_rds_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/hair_ss_mtl/higher_radius_for_ears_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/hair/Looks/hair_ss_mtl/lower_radius_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/hair/Looks/hair_ss_mtl/msk_ss_rds_ears_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (14.3877, 3.80797)
                }

                def Shader "msk_ss_rds_ears_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_ss_rds_ears/msk_ss_rds_ears.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (7.88331, 3.80797)
                }

                def Shader "lower_radius_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.25, 0.25, 0.25)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (11.8543, 3.39977)
                }

                def Shader "higher_radius_for_ears_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.5, 0.5, 0.5)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (11.8543, 2.24084)
                }

                def Shader "msk_ss_rds_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_ss_rds/msk_ss_rds.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    uniform float2 ui:nodegraph:node:pos = (7.88331, 2.24084)
                }

                def Shader "msk_head_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/hair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hair_0/default/textures/msk_head/msk_head.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.0904, -2.26662)
                }

                def Shader "base_tip_moonray"
                {
                    uniform token info:id = "HairMap"
                    float3 inputs:base_color.connect = </wolf/hair/Looks/hair_ss_mtl/ColorCorrectHsvMap2_moonray.outputs:out>
                    float inputs:bias = 0.8
                    float3 inputs:tip_color.connect = </wolf/hair/Looks/hair_ss_mtl/ColorCorrectHsvMap1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (14.1697, -5.85425)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/hair/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hair/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hair/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/hair/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/hair/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/hair/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def Procedural "guard_hair_set"
            {
                custom float procedural:base_width_factor = 3.5
                uniform token procedural:class = "WillowGeometry_v2"
                custom float procedural:density_factor = 0.8
                custom asset procedural:hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/hair_0/head_0/hair_0.hair@
                custom string procedural:keep_set_list = "*guard*"
                custom asset procedural:reference_hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/hair_0/head_0/hair_0.hair@
                custom int procedural:refine_level = 2
                custom token procedural:remove_curve_sets_pattern = "*core*"
                custom int procedural:thread_chunk_size = 3000
                uniform token purpose = "render"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def GeomSubset "default"
                {
                    rel material:binding = </wolf/hair/Looks/guard_hair_ss_mtl>
                }
            }

            def Procedural "hair_set"
            {
                custom float procedural:base_width_factor = 3.5
                uniform token procedural:class = "WillowGeometry_v2"
                custom float procedural:density_factor = 0.8
                custom asset procedural:hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/hair_0/head_0/hair_0.hair@
                custom string procedural:keep_set_list = "*all_head*"
                custom asset procedural:reference_hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/hair_0/head_0/hair_0.hair@
                custom int procedural:refine_level = 2
                custom token procedural:remove_curve_sets_pattern = "*core*"
                custom int procedural:thread_chunk_size = 3000
                uniform token purpose = "render"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def GeomSubset "default"
                {
                    rel material:binding = </wolf/hair/Looks/hair_ss_mtl>
                }
            }
        }
    }

    def Scope "hat" (
        assetInfo = {
            string name = "char/wolf/hat_10"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-5.412499, 54.369797, -6.179344), (5.412499, 60.779736, 5.2610607), (-5.412499, 54.369797, -6.179344), (5.412499, 60.779736, 5.2610607), (-5.412499, 54.369797, -6.179344), (5.412499, 60.779736, 5.2610607), (-5.412499, 54.369797, -6.179344), (5.412499, 60.779736, 5.2610607)]
        custom string rigged_name = "hat_10"
        custom string scalp = "hat_10"

        def Scope "Looks"
        {
            def Material "Fabric_Tux" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/hat/Looks/Fabric_Tux/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/hat/Looks/Fabric_Tux/DwaFabricMaterial2_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/hat/Looks/Fabric_Tux/DwaFabricMaterial_satin_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (10.8288, 2.13595)
                }

                def Shader "DwaFabricMaterial2_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/hat/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/hat/Looks/Fabric_Tux/nmld_moonray.outputs:out>
                    float3 inputs:warp_color.connect = </wolf/hat/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:warp_roughness = 0.7
                    float inputs:warp_thread_elevation = 60
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 2.13595)
                }

                def Shader "DwaFabricMaterial_satin_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/hat/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/hat/Looks/Fabric_Tux/rgh_remap_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/hat/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_independent_weft_attributes = 1
                    float3 inputs:warp_color.connect = </wolf/hat/Looks/Fabric_Tux/ColorCorrectHsvMap3_moonray.outputs:out>
                    float inputs:warp_roughness = 0.35
                    float inputs:warp_thread_coverage = 0.7
                    float inputs:warp_thread_elevation = 30
                    float3 inputs:weft_color.connect = </wolf/hat/Looks/Fabric_Tux/ColorCorrectHsvMap3_moonray.outputs:out>
                    float inputs:weft_roughness = 0.25
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.59012, 7.36423)
                }

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    float inputs:choice = 2
                    color3f inputs:input0 = (0.782, 0.7707392, 0.744464)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 3.59574)
                }

                def Shader "ColorCorrectHsvMap3_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hat/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    float inputs:value_factor = 0.75
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.47229, 9.74495)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.48707, 9.83233)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.48707, 14.2081)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/hat/Looks/Fabric_Tux/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.396061, 8.26172)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.44194, 8.26172)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/hat/Looks/Fabric_Tux/OpMap1_moonray.outputs:out>
                    float inputs:value_factor = 2.15
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.80842, 2.15899)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hat/Looks/Fabric_Tux/clr_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/hat/Looks/Fabric_Tux/SwitchColorMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.10972, 2.03552)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 1.50552)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.20741, 3.59574)
                }
            }

            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/hat/Looks/dwa_solid_dielectric/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/hat/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/hat/Looks/dwa_solid_dielectric/suit_mtl_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (7.79908, -0.0119264)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/hat/Looks/dwa_solid_dielectric/OpMap1_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/hat/Looks/dwa_solid_dielectric/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/hat/Looks/dwa_solid_dielectric/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "suit_mtl_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/hat/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/hat/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/hat/Looks/dwa_solid_dielectric/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/hat/Looks/dwa_solid_dielectric/rgh_remap1_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/hat/Looks/dwa_solid_dielectric/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_UVs_for_thread_direction = 0
                    float3 inputs:warp_color.connect = </wolf/hat/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 0.715
                    float inputs:warp_thread_elevation = 30
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, 11.2319)
                }

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.782, 0.7707392, 0.744464)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 2.09966)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.35079, 17.4445)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.35079, 13.0687)
                }

                def Shader "rgh_remap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/hat/Looks/dwa_solid_dielectric/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.46766, 11.4981)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.30566, 11.4981)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hat/Looks/dwa_solid_dielectric/clr_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/hat/Looks/dwa_solid_dielectric/SwitchColorMap1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.36376, 1.44216)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 0.781759)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.30385, 5.42504)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/hat/Looks/dwa_solid_dielectric/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, -2.19122)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -2.19122)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/hat_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 7.46623)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/hat/Looks/dwa_solid_dielectric/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.57834, 7.46623)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/hat/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hat/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hat/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/hat/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/hat/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/hat/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/hat/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/hat/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "hat_10"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/hat_10/head_0/alembic/hat_10.abc@
                uniform token purpose = "render"

                over "m_band"
                {
                    rel material:binding = </wolf/hat/Looks/Fabric_Tux>
                }

                over "m_hat"
                {
                    rel material:binding = </wolf/hat/Looks/dwa_solid_dielectric>
                }
            }
        }
    }

    def Scope "eyes" (
        assetInfo = {
            string name = "char/wolf/eyes_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        def Scope "Looks"
        {
            def Material "l_eye_inner" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.16.3.0", "moonshine-7.22"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/eyes/Looks/l_eye_inner/iris_material2_moonray.outputs:surface>

                def Shader "EYE_COLOR_SWITCH1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.085, 0.013, 0.008)
                    color3f inputs:input1 = (0.02015, 0.031, 0)
                    color3f inputs:input2 = (0, 0.9, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.47737, 1.70375)
                }

                def Shader "iris_material2_moonray"
                {
                    uniform token info:id = "IrisMaterial"
                    float3 inputs:albedo.connect = </wolf/eyes/Looks/l_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    token inputs:extra_aovs.connect = </wolf/eyes/Looks/l_eye_inner/ListMap_eyes_moonray.outputs:out>
                    float inputs:input_normal_dial = 0
                    float inputs:iris_bulge = 3
                    float3 inputs:iris_caustics.connect = </wolf/eyes/Looks/l_eye_inner/iris_caustics_msk1_moonray.outputs:out>
                    float3 inputs:iris_caustics_color.connect = </wolf/eyes/Looks/l_eye_inner/cc_caustic2_moonray.outputs:out>
                    float inputs:iris_caustics_exponent = 1
                    float inputs:iris_max_v = 0.95
                    float inputs:iris_min_v = 0.25
                    float inputs:refractive_index = 1.2
                    float inputs:roughness = 0.2
                    float3 inputs:scattering_color.connect = </wolf/eyes/Looks/l_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    float inputs:scattering_radius = 0.2
                    bool inputs:show_specular = 1
                    float inputs:specular = 0
                    bool inputs:use_iris_caustics_color = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (19.4404, 1.72942)
                }

                def Shader "caustic_color_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/eyes/Looks/l_eye_inner/ImageMap2_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-10.2133, 4.36092)
                }

                def Shader "ImageMap2_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/common/human/eyes/textures/tile/msk_brush_constrict.tx@
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-12.5586, 4.36092)
                }

                def Shader "OpMap7_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/caustic_color_remap_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/l_eye_inner/iris_gradient2_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.61573, 5.95703)
                }

                def Shader "iris_gradient2_moonray"
                {
                    uniform token info:id = "GradientMap"
                    color3f inputs:color_A = (0.159, 0.159, 0.159)
                    vector3f inputs:end = (0, 0.82, 0)
                    float inputs:falloff_bias = 0.25
                    token inputs:falloff_type = "linear"
                    token inputs:space = "texture"
                    vector3f inputs:start = (0, 0.80175, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-10.2133, 6.45796)
                }

                def Shader "OpMap6_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/pupil_grad2_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/l_eye_inner/OpMap7_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.17839, 4.97703)
                }

                def Shader "pupil_grad2_moonray"
                {
                    uniform token info:id = "GradientMap"
                    color3f inputs:color_A = (1, 1, 1)
                    vector3f inputs:end = (0, 0.83, 0)
                    token inputs:falloff_type = "linear"
                    token inputs:space = "texture"
                    vector3f inputs:start = (0, 0.805, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.7571, 3.77147)
                }

                def Shader "eyewhite_color_mix4_moonray"
                {
                    uniform token info:id = "LayerMap"
                    color3f inputs:input_A = (0.782, 0.40571335, 0.104006015)
                    color3f inputs:input_B = (0.782, 0.40571335, 0.104006015)
                    float3 inputs:mask.connect = </wolf/eyes/Looks/l_eye_inner/Noise_eyewhite3_moonray.outputs:out>
                    token inputs:mode = "off"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.84742, 5.04092)
                }

                def Shader "Noise_eyewhite3_moonray"
                {
                    uniform token info:id = "NoiseMap_v2"
                    color3f inputs:color_A = (0.669, 0.669, 0.669)
                    color3f inputs:color_B = (0.9, 0.9, 0.9)
                    float inputs:frequency_multiplier = 0.025
                    float inputs:max_level = 8
                    float inputs:persistence = 1
                    token inputs:space = "reference"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.29901, 5.19092)
                }

                def Shader "OpMap4_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/OpMap6_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/l_eye_inner/OpMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (4.16865, 17.1945)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.25752, 17.1945)
                }

                def Shader "eyewhite_gradient1_moonray"
                {
                    uniform token info:id = "GradientMap"
                    color3f inputs:color_A = (1, 1, 1)
                    color3f inputs:color_B = (0, 0, 0)
                    vector3f inputs:end = (0, 0.80175, 0)
                    float inputs:falloff_bias = 0
                    token inputs:falloff_type = "linear"
                    token inputs:space = "texture"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.96589, 8.75282)
                }

                def Shader "ExtraAovMap_matte_pupil_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/eyes/Looks/l_eye_inner/OpMap4_moonray.outputs:out>
                    string inputs:label = "U_matte_pupil"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.3341, 17.1945)
                }

                def Shader "ExtraAovMap_albedo_eyes_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/eyes/Looks/l_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    string inputs:label = "U_albedo_eyes"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.722, 13.2388)
                }

                def Shader "LayerMap_iris_plus_whites2_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/l_eye_inner/Op_eyewhite2_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/eyes/Looks/l_eye_inner/iris_edge_lightening1_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.722, 3.90502)
                }

                def Shader "OpMap_matte_eyewhite_B_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    color3f inputs:op2 = (0, 0, 1)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (6.32799, 13.918)
                }

                def Shader "OpMap_matte_eyes_alpha_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/OpMap_matte_eyewhite_B_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/l_eye_inner/OpMap_matte_iris_B_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (10.2961, 14.8266)
                }

                def Shader "OpMap_matte_iris_B_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/iris_caustics_msk1_moonray.outputs:out>
                    color3f inputs:op2 = (0, 0, 1)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (6.32799, 15.4765)
                }

                def Shader "iris_caustics_msk1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    float inputs:output_max = 0
                    float inputs:output_min = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (12.7532, 7.12082)
                }

                def Shader "LayerMap_matte_eyes_alpha_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/l_eye_inner/LayerMap_matte_eyes_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/eyes/Looks/l_eye_inner/OpMap_matte_eyes_alpha_moonray.outputs:out>
                    token inputs:mode = "add"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (13.4052, 11.6434)
                }

                def Shader "LayerMap_matte_eyes_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/l_eye_inner/OpMap_matte_eyewhite_R_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/eyes/Looks/l_eye_inner/OpMap_matte_iris_G_moonray.outputs:out>
                    token inputs:mode = "add"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (10.4215, 11.6434)
                }

                def Shader "OpMap_matte_eyewhite_R_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    color3f inputs:op2 = (1, 0, 0)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (6.32799, 10.9901)
                }

                def Shader "OpMap_matte_iris_G_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/iris_caustics_msk1_moonray.outputs:out>
                    color3f inputs:op2 = (0, 1, 0)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (6.32799, 12.498)
                }

                def Shader "ExtraAovMap_matte_eyes_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/eyes/Looks/l_eye_inner/LayerMap_matte_eyes_alpha_moonray.outputs:out>
                    string inputs:label = "U_matte_eyes"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.722, 11.6434)
                }

                def Shader "ListMap_eyes_moonray"
                {
                    uniform token info:id = "ListMap"
                    token inputs:map0.connect = </wolf/eyes/Looks/l_eye_inner/ExtraAovMap_matte_eyes_moonray.outputs:out>
                    token inputs:map1.connect = </wolf/eyes/Looks/l_eye_inner/ExtraAovMap_albedo_eyes_moonray.outputs:out>
                    token inputs:map2.connect = </wolf/eyes/Looks/l_eye_inner/ExtraAovMap_matte_pupil_moonray.outputs:out>
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.7041, 11.6434)
                }

                def Shader "cc_caustic2_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 2
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/eyes/Looks/l_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    bool inputs:saturation_enabled = 0
                    bool inputs:TMI_enabled = 0
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (16.722, 1.72942)
                }

                def Shader "iris_edge_lightening1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/EYE_COLOR_SWITCH1_moonray.outputs:out>
                    float inputs:op1_factor = 0.5
                    float3 inputs:op2.connect = </wolf/eyes/Looks/l_eye_inner/OpMap6_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.25651, 2.38375)
                }

                def Shader "Op_eyewhite2_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_color_mix4_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/l_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.43549, 6.67082)
                }
            }

            def Material "eye_outer" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.16.3.0", "moonshine-7.22"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/eyes/Looks/eye_outer/DwaRefractiveMaterial_moonray.outputs:surface>

                def Shader "DwaRefractiveMaterial_moonray"
                {
                    uniform token info:id = "DwaRefractiveMaterial"
                    float inputs:clearcoat = 0
                    token inputs:clearcoat_model = "GGX"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:input_normal_dial = 0
                    float inputs:refractive_index = 1.33
                    float inputs:roughness = 0.15
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (-2.55683, -1.1288)
                }
            }

            def Material "r_eye_inner" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.16.3.0", "moonshine-7.22"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/eyes/Looks/r_eye_inner/iris_material2_moonray.outputs:surface>

                def Shader "EYE_COLOR_SWITCH1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.085, 0.013, 0.008)
                    color3f inputs:input1 = (0.02015, 0.031, 0)
                    color3f inputs:input2 = (0, 0.9, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.95377, 2.81615)
                }

                def Shader "iris_material2_moonray"
                {
                    uniform token info:id = "IrisMaterial"
                    float3 inputs:albedo.connect = </wolf/eyes/Looks/r_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    token inputs:extra_aovs.connect = </wolf/eyes/Looks/r_eye_inner/ListMap_eyes_moonray.outputs:out>
                    float inputs:input_normal_dial = 0
                    float inputs:iris_bulge = 3
                    float3 inputs:iris_caustics.connect = </wolf/eyes/Looks/r_eye_inner/iris_caustics_msk1_moonray.outputs:out>
                    float3 inputs:iris_caustics_color.connect = </wolf/eyes/Looks/r_eye_inner/cc_caustic2_moonray.outputs:out>
                    float inputs:iris_caustics_exponent = 1
                    float inputs:iris_max_v = 0.95
                    float inputs:iris_min_v = 0.25
                    float inputs:refractive_index = 1.2
                    float inputs:roughness = 0.2
                    float3 inputs:scattering_color.connect = </wolf/eyes/Looks/r_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    float inputs:scattering_radius = 0.2
                    bool inputs:show_specular = 1
                    float inputs:specular = 0
                    bool inputs:use_iris_caustics_color = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (21.964, 2.84182)
                }

                def Shader "caustic_color_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/eyes/Looks/r_eye_inner/ImageMap2_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-7.96149, 5.17649)
                }

                def Shader "ImageMap2_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/common/human/eyes/textures/tile/msk_brush_constrict.tx@
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-10.1209, 5.17649)
                }

                def Shader "OpMap7_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/caustic_color_remap_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/r_eye_inner/iris_gradient2_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.53003, 6.81171)
                }

                def Shader "iris_gradient2_moonray"
                {
                    uniform token info:id = "GradientMap"
                    color3f inputs:color_A = (0.159, 0.159, 0.159)
                    vector3f inputs:end = (0, 0.82, 0)
                    float inputs:falloff_bias = 0.25
                    token inputs:falloff_type = "linear"
                    token inputs:space = "texture"
                    vector3f inputs:start = (0, 0.80175, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-8.1276, 7.31264)
                }

                def Shader "OpMap6_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/pupil_grad2_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/r_eye_inner/OpMap7_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.09269, 5.83171)
                }

                def Shader "pupil_grad2_moonray"
                {
                    uniform token info:id = "GradientMap"
                    color3f inputs:color_A = (1, 1, 1)
                    vector3f inputs:end = (0, 0.83, 0)
                    token inputs:falloff_type = "linear"
                    token inputs:space = "texture"
                    vector3f inputs:start = (0, 0.805, 0)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.6714, 4.62615)
                }

                def Shader "eyewhite_color_mix4_moonray"
                {
                    uniform token info:id = "LayerMap"
                    color3f inputs:input_A = (0.782, 0.40571335, 0.104006015)
                    color3f inputs:input_B = (0.782, 0.40571335, 0.104006015)
                    float3 inputs:mask.connect = </wolf/eyes/Looks/r_eye_inner/Noise_eyewhite3_moonray.outputs:out>
                    token inputs:mode = "off"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.37102, 6.15332)
                }

                def Shader "Noise_eyewhite3_moonray"
                {
                    uniform token info:id = "NoiseMap_v2"
                    color3f inputs:color_A = (0.669, 0.669, 0.669)
                    color3f inputs:color_B = (0.9, 0.9, 0.9)
                    float inputs:frequency_multiplier = 0.025
                    float inputs:max_level = 8
                    float inputs:persistence = 1
                    token inputs:space = "reference"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.82261, 6.30332)
                }

                def Shader "OpMap4_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/OpMap6_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/r_eye_inner/OpMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (6.69225, 18.3069)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.78112, 18.3069)
                }

                def Shader "eyewhite_gradient1_moonray"
                {
                    uniform token info:id = "GradientMap"
                    color3f inputs:color_A = (1, 1, 1)
                    color3f inputs:color_B = (0, 0, 0)
                    vector3f inputs:end = (0, 0.80175, 0)
                    float inputs:falloff_bias = 0
                    token inputs:falloff_type = "linear"
                    token inputs:space = "texture"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.48949, 9.86522)
                }

                def Shader "ExtraAovMap_matte_pupil_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/eyes/Looks/r_eye_inner/OpMap4_moonray.outputs:out>
                    string inputs:label = "U_matte_pupil"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (18.8577, 18.3069)
                }

                def Shader "ExtraAovMap_albedo_eyes_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/eyes/Looks/r_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    string inputs:label = "U_albedo_eyes"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.2456, 14.3512)
                }

                def Shader "LayerMap_iris_plus_whites2_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/r_eye_inner/Op_eyewhite2_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/eyes/Looks/r_eye_inner/iris_edge_lightening1_moonray.outputs:out>
                    float3 inputs:mask.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.2456, 5.01742)
                }

                def Shader "OpMap_matte_eyewhite_B_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    color3f inputs:op2 = (0, 0, 1)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.85159, 15.0304)
                }

                def Shader "OpMap_matte_eyes_alpha_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/OpMap_matte_eyewhite_B_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/r_eye_inner/OpMap_matte_iris_B_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (12.8197, 15.939)
                }

                def Shader "OpMap_matte_iris_B_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/iris_caustics_msk1_moonray.outputs:out>
                    color3f inputs:op2 = (0, 0, 1)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.85159, 16.5889)
                }

                def Shader "iris_caustics_msk1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    float inputs:output_max = 0
                    float inputs:output_min = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.2456, 6.98842)
                }

                def Shader "LayerMap_matte_eyes_alpha_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/r_eye_inner/LayerMap_matte_eyes_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/eyes/Looks/r_eye_inner/OpMap_matte_eyes_alpha_moonray.outputs:out>
                    token inputs:mode = "add"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (15.9288, 12.7558)
                }

                def Shader "LayerMap_matte_eyes_moonray"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/r_eye_inner/OpMap_matte_eyewhite_R_moonray.outputs:out>
                    float3 inputs:input_B.connect = </wolf/eyes/Looks/r_eye_inner/OpMap_matte_iris_G_moonray.outputs:out>
                    token inputs:mode = "add"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (12.9451, 12.7558)
                }

                def Shader "OpMap_matte_eyewhite_R_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    color3f inputs:op2 = (1, 0, 0)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.85159, 12.1025)
                }

                def Shader "OpMap_matte_iris_G_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/iris_caustics_msk1_moonray.outputs:out>
                    color3f inputs:op2 = (0, 1, 0)
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.85159, 13.6104)
                }

                def Shader "ExtraAovMap_matte_eyes_moonray"
                {
                    uniform token info:id = "ExtraAovMap"
                    float3 inputs:color.connect = </wolf/eyes/Looks/r_eye_inner/LayerMap_matte_eyes_alpha_moonray.outputs:out>
                    string inputs:label = "U_matte_eyes"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.2456, 12.7558)
                }

                def Shader "ListMap_eyes_moonray"
                {
                    uniform token info:id = "ListMap"
                    token inputs:map0.connect = </wolf/eyes/Looks/r_eye_inner/ExtraAovMap_matte_eyes_moonray.outputs:out>
                    token inputs:map1.connect = </wolf/eyes/Looks/r_eye_inner/ExtraAovMap_albedo_eyes_moonray.outputs:out>
                    token inputs:map2.connect = </wolf/eyes/Looks/r_eye_inner/ExtraAovMap_matte_pupil_moonray.outputs:out>
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (22.2277, 12.7558)
                }

                def Shader "cc_caustic2_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 2
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/eyes/Looks/r_eye_inner/LayerMap_iris_plus_whites2_moonray.outputs:out>
                    bool inputs:saturation_enabled = 0
                    bool inputs:TMI_enabled = 0
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (19.2456, 2.84182)
                }

                def Shader "iris_edge_lightening1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/EYE_COLOR_SWITCH1_moonray.outputs:out>
                    float inputs:op1_factor = 0.5
                    float3 inputs:op2.connect = </wolf/eyes/Looks/r_eye_inner/OpMap6_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.267089, 3.49615)
                }

                def Shader "Op_eyewhite2_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_color_mix4_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/eyes/Looks/r_eye_inner/eyewhite_gradient1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (7.95909, 7.78322)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/eyes/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/eyes/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/eyes/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/eyes/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/eyes/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/eyes/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "l_eye_0"
            {
                custom float moonray:adaptive_error = 4
                custom int moonray:curved_motion_blur_sample_count = 2
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/eyes_0/head_0/alembic//l_eye_0.abc@
                custom float moonray:ray_epsilon = 0.0001
                custom token moonray:side_type = "force single-sided"
                uniform token purpose = "render"

                over "l_inner"
                {
                    over "l_eyewhite"
                    {
                        rel material:binding = </wolf/eyes/Looks/l_eye_inner>
                    }

                    over "l_iris"
                    {
                        rel material:binding = </wolf/eyes/Looks/l_eye_inner>
                    }

                    over "l_pupil"
                    {
                        rel material:binding = </wolf/eyes/Looks/l_eye_inner>
                    }
                }

                over "l_outer"
                {
                    over "l_cornea"
                    {
                        rel material:binding = </wolf/eyes/Looks/eye_outer>
                    }

                    over "l_sclera"
                    {
                        rel material:binding = </wolf/eyes/Looks/eye_outer>
                    }
                }
            }

            def "r_eye_0"
            {
                custom float moonray:adaptive_error = 4
                custom int moonray:curved_motion_blur_sample_count = 2
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/eyes_0/head_0/alembic//r_eye_0.abc@
                custom float moonray:ray_epsilon = 0.0001
                custom token moonray:side_type = "force single-sided"
                uniform token purpose = "render"

                over "r_inner"
                {
                    over "r_eyewhite"
                    {
                        rel material:binding = </wolf/eyes/Looks/r_eye_inner>
                    }

                    over "r_pupil"
                    {
                        rel material:binding = </wolf/eyes/Looks/r_eye_inner>
                    }

                    over "r_iris"
                    {
                        rel material:binding = </wolf/eyes/Looks/r_eye_inner>
                    }
                }

                over "r_outer"
                {
                    over "r_sclera"
                    {
                        rel material:binding = </wolf/eyes/Looks/eye_outer>
                    }

                    over "r_cornea"
                    {
                        rel material:binding = </wolf/eyes/Looks/eye_outer>
                    }
                }
            }
        }
    }

    def Scope "jacket" (
        assetInfo = {
            string name = "char/wolf/jacket_10"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-21.063543, 29.52641, -4.266836), (21.063543, 49.022472, 4.112299), (-21.063543, 29.52641, -4.266836), (21.063543, 49.022472, 4.112299), (-21.063543, 29.52641, -4.266836), (21.063543, 49.022472, 4.112299), (-21.063543, 29.52641, -4.266836), (21.063543, 49.022472, 4.112299)]
        custom string rigged_name = "jacket_10"
        custom string scalp = "jacket_10"

        def Scope "Looks"
        {
            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/jacket/Looks/dwa_solid_dielectric/jacket_10_mtl_moonray.outputs:surface>

                def Shader "jacket_10_mtl_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/jacket/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/jacket/Looks/dwa_solid_dielectric/DwaBaseMaterial_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (9.52273, -2.19122)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/jacket/Looks/dwa_solid_dielectric/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/jacket/Looks/dwa_solid_dielectric/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/jacket/Looks/dwa_solid_dielectric/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "DwaBaseMaterial_moonray"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/jacket/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/jacket/Looks/dwa_solid_dielectric/nmld_holiday_moonray.outputs:out>
                    float inputs:metallic = 1
                    float inputs:metallic.connect = </wolf/jacket/Looks/dwa_solid_dielectric/mtl_holiday_moonray.outputs:out>
                    float3 inputs:metallic_color.connect = </wolf/jacket/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float3 inputs:metallic_edge_color.connect = </wolf/jacket/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/jacket/Looks/dwa_solid_dielectric/rgh_remap1_moonray.outputs:out>
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, 12.5894)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.52262, 19.5394)
                }

                def Shader "mtl_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/mtl_holiday/mtl_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.98222, 17.3838)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.52262, 15.1636)
                }

                def Shader "rgh_remap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/jacket/Looks/dwa_solid_dielectric/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.63949, 13.593)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.47749, 13.593)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.30385, 5.42504)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/jacket/Looks/dwa_solid_dielectric/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, -2.19122)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -2.19122)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 7.46623)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -0.877773)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/jacket/Looks/dwa_solid_dielectric/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.57834, 7.46623)
                }
            }

            def Material "Fabric_Tux" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/jacket/Looks/Fabric_Tux/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/jacket/Looks/Fabric_Tux/DwaFabricMaterial2_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/jacket/Looks/Fabric_Tux/suit_mtl_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (9.71288, 2.13595)
                }

                def Shader "DwaFabricMaterial2_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/jacket/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/jacket/Looks/Fabric_Tux/nmld_moonray.outputs:out>
                    float3 inputs:warp_color.connect = </wolf/jacket/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:warp_roughness = 1
                    float inputs:warp_thread_elevation = 60
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 2.13595)
                }

                def Shader "suit_mtl_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/jacket/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/jacket/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/jacket/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/jacket/Looks/Fabric_Tux/rgh_remap_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/jacket/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_UVs_for_thread_direction = 0
                    float3 inputs:warp_color.connect = </wolf/jacket/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 0.715
                    float inputs:warp_thread_elevation = 30
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 7.54707)
                }

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.927, 0.927, 0.927)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 3.59574)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.40416, 13.7597)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.40416, 9.38387)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/jacket/Looks/Fabric_Tux/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.47897, 7.81326)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.35903, 7.81326)
                }

                def Shader "amb_control_moonray"
                {
                    uniform token info:id = "BlendMap"
                    float inputs:blend_amount = 0
                    float3 inputs:color_A.connect = </wolf/jacket/Looks/Fabric_Tux/clr_flt_moonray.outputs:out>
                    float3 inputs:color_B.connect = </wolf/jacket/Looks/Fabric_Tux/clr_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.58468, 0.701094)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.12179, 2.28109)
                }

                def Shader "clr_flt_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/clr_flt/clr_flt.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.25747, 0.190448)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/jacket/Looks/Fabric_Tux/OpMap1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.80842, 2.15899)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/jacket/Looks/Fabric_Tux/amb_control_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/jacket/Looks/Fabric_Tux/SwitchColorMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.10972, 2.03552)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/jacket_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.20741, 3.59574)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/jacket/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/jacket/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/jacket/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/jacket/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/jacket/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/jacket/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/jacket/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/jacket/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "jacket_10"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/jacket_10/body_0/alembic/jacket_10.abc@
                uniform token purpose = "render"

                over "l_button1"
                {
                    rel material:binding = </wolf/jacket/Looks/dwa_solid_dielectric>
                }

                over "l_button2"
                {
                    rel material:binding = </wolf/jacket/Looks/dwa_solid_dielectric>
                }

                over "m_button"
                {
                    rel material:binding = </wolf/jacket/Looks/dwa_solid_dielectric>
                }

                over "r_button1"
                {
                    rel material:binding = </wolf/jacket/Looks/dwa_solid_dielectric>
                }

                over "r_button2"
                {
                    rel material:binding = </wolf/jacket/Looks/dwa_solid_dielectric>
                }

                over "m_jacket"
                {
                    rel material:binding = </wolf/jacket/Looks/Fabric_Tux>
                }
            }
        }
    }

    def Scope "lines" (
        assetInfo = {
            string name = "char/wolf/lines_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "lines_0"
        custom string scalp = "lines_0"

        def Scope "Looks"
        {
            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.8.4.0", "moonshine-7.14"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/lines/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    color3f inputs:albedo = (0.004, 0.004, 0.004)
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    float inputs:roughness = 1
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_specular = 0
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/lines/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/lines/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/lines/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/lines/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/lines/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/lines/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/lines/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/lines/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "lines_0"
            {
                rel material:binding = </wolf/lines/Looks/dwa_solid_dielectric>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/lines_0/head_0/alembic/lines_0.abc@
                custom bool moonray:visible_diffuse_reflection = 0
                custom bool moonray:visible_diffuse_transmission = 0
                custom bool moonray:visible_glossy_reflection = 0
                custom bool moonray:visible_glossy_transmission = 0
                custom bool moonray:visible_in_camera = 0
                custom bool moonray:visible_mirror_reflection = 0
                custom bool moonray:visible_mirror_transmission = 0
                custom bool moonray:visible_shadow = 0
                custom bool moonray:visible_volume = 0
                uniform token purpose = "render"
            }
        }
    }

    def Scope "mustache" (
        assetInfo = {
            string name = "char/wolf/mustache_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "mustache_0"
        custom string scalp = "mustache_0"

        def Scope "Looks"
        {
            def Material "mustache_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.15.4.0", "moonshine-7.21"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/mustache/Looks/mustache_mtl/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    color3f inputs:albedo = (0.004, 0.004, 0.004)
                    float inputs:clearcoat = 0
                    string inputs:diffuse_transmission_blending_behavior = "RGB"
                    float inputs:roughness = 1
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_specular = 0
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/mustache/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/mustache/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/mustache/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/mustache/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/mustache/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/mustache/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/mustache/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/mustache/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "mustache_0"
            {
                rel material:binding = </wolf/mustache/Looks/mustache_mtl>
                custom float moonray:adaptive_error = 1
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/mustache_0/head_0/alembic/mustache_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "pants" (
        assetInfo = {
            string name = "char/wolf/pants_10"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-4.6707563, 1.7691765, -3.344089), (4.6707563, 36.256523, 2.590806), (-4.6707563, 1.7691765, -3.344089), (4.6707563, 36.256523, 2.590806), (-4.6707563, 1.7691765, -3.344089), (4.6707563, 36.256523, 2.590806), (-4.6707563, 1.7691765, -3.344089), (4.6707563, 36.256523, 2.590806)]
        custom string rigged_name = "pants_10"
        custom string scalp = "pants_10"

        def Scope "Looks"
        {
            def Material "Fabric_Tux" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/pants/Looks/Fabric_Tux/pants_10_mtl_moonray.outputs:surface>

                def Shader "pants_10_mtl_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/pants/Looks/Fabric_Tux/DwaFabricMaterial2_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/pants/Looks/Fabric_Tux/suit_mtl_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (7.87103, 2.13595)
                }

                def Shader "DwaFabricMaterial2_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/pants/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/pants/Looks/Fabric_Tux/nmld_moonray.outputs:out>
                    float3 inputs:warp_color.connect = </wolf/pants/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:warp_roughness = 1
                    float inputs:warp_thread_elevation = 60
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 2.13595)
                }

                def Shader "suit_mtl_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/pants/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/pants/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/pants/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/pants/Looks/Fabric_Tux/rgh_remap_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/pants/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_UVs_for_thread_direction = 0
                    float3 inputs:warp_color.connect = </wolf/pants/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 0.715
                    float inputs:warp_thread_elevation = 30
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 7.36214)
                }

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.927, 0.927, 0.927)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 3.59574)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.40416, 13.5747)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.40416, 9.19894)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/pants/Looks/Fabric_Tux/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.47897, 7.62833)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.35903, 7.62833)
                }

                def Shader "amb_control_moonray"
                {
                    uniform token info:id = "BlendMap"
                    float inputs:blend_amount = 0
                    float3 inputs:color_A.connect = </wolf/pants/Looks/Fabric_Tux/clr_flt_moonray.outputs:out>
                    float3 inputs:color_B.connect = </wolf/pants/Looks/Fabric_Tux/clr_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.58468, 0.701094)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.50009, 1.72001)
                }

                def Shader "clr_flt_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/clr_flt/clr_flt.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.50009, 0.214289)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/pants/Looks/Fabric_Tux/OpMap1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.80842, 2.15899)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/pants/Looks/Fabric_Tux/amb_control_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/pants/Looks/Fabric_Tux/SwitchColorMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.10972, 2.03552)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.20741, 3.59574)
                }
            }

            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/pants/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/pants/Looks/dwa_solid_dielectric/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/pants/Looks/dwa_solid_dielectric/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/pants/Looks/dwa_solid_dielectric/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.30385, 5.42504)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/pants/Looks/dwa_solid_dielectric/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, -2.19122)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -2.19122)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 7.46623)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/pants_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -0.877773)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/pants/Looks/dwa_solid_dielectric/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.57834, 7.46623)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/pants/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/pants/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/pants/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/pants/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/pants/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/pants/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/pants/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/pants/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "pants_10"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/pants_10/body_0/alembic/pants_10.abc@
                custom token moonray:subd_type = "force polygon mesh"
                uniform token purpose = "render"

                over "m_pants"
                {
                    rel material:binding = </wolf/pants/Looks/Fabric_Tux>
                }
            }
        }
    }

    def Scope "shirt" (
        assetInfo = {
            string name = "char/wolf/shirt_10"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-21.673172, 32.024624, -4.046925), (21.673172, 49.14995, 3.8974557), (-21.673172, 32.024624, -4.046925), (21.673172, 49.14995, 3.8974557), (-21.673172, 32.024624, -4.046925), (21.673172, 49.14995, 3.8974557), (-21.673172, 32.024624, -4.046925), (21.673172, 49.14995, 3.8974557)]
        custom string rigged_name = "shirt_10"
        custom string scalp = "shirt_10"

        def Scope "Looks"
        {
            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/shirt/Looks/dwa_solid_dielectric/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/shirt/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/shirt/Looks/dwa_solid_dielectric/cotton_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (9.95053, -2.19122)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/shirt/Looks/dwa_solid_dielectric/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/shirt/Looks/dwa_solid_dielectric/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/shirt/Looks/dwa_solid_dielectric/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "cotton_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/shirt/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 1
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/shirt/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/shirt/Looks/dwa_solid_dielectric/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/shirt/Looks/dwa_solid_dielectric/rgh_remap1_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/shirt/Looks/dwa_solid_dielectric/nmld_holiday_moonray.outputs:out>
                    float inputs:input_normal_dial = 2
                    bool inputs:show_fuzz = 1
                    float3 inputs:warp_color.connect = </wolf/shirt/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 1
                    float inputs:warp_thread_elevation = 10
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, 12.6914)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.34251, 19.4562)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.34251, 15.0804)
                }

                def Shader "rgh_remap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/shirt/Looks/dwa_solid_dielectric/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.45938, 13.5098)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.29738, 13.5098)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.30385, 5.42504)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/shirt/Looks/dwa_solid_dielectric/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, -2.19122)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -2.19122)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 7.46623)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -0.877773)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/shirt/Looks/dwa_solid_dielectric/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.57834, 7.46623)
                }
            }

            def Material "shirt" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/shirt/Looks/shirt/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/shirt/Looks/shirt/dwa_solid_dielectric_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/shirt/Looks/shirt/cotton_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (14.1619, 0.186767)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/shirt/Looks/shirt/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    float inputs:diffuse_transmission = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:emission = (0, 0, 0)
                    color3f inputs:fuzz_albedo = (1, 0.18699998, 0.18699998)
                    float inputs:fuzz_roughness = 0.2
                    token inputs:input_normal.connect = </wolf/shirt/Looks/shirt/nmld_moonray.outputs:out>
                    float inputs:refractive_index = 0
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/shirt/Looks/shirt/rgh_remap_moonray.outputs:out>
                    float3 inputs:scattering_color.connect = </wolf/shirt/Looks/shirt/clr_moonray.outputs:out>
                    float inputs:scattering_radius = 1
                    float inputs:scattering_radius.connect = </wolf/shirt/Looks/shirt/trl_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.81178, -0.736716)
                }

                def Shader "cotton_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/shirt/Looks/shirt/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 1
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/shirt/Looks/shirt/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/shirt/Looks/shirt/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/shirt/Looks/shirt/rgh_remap1_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/shirt/Looks/shirt/nmld_holiday_moonray.outputs:out>
                    float inputs:input_normal_dial = 2
                    bool inputs:show_fuzz = 1
                    float3 inputs:warp_color.connect = </wolf/shirt/Looks/shirt/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 1
                    float inputs:warp_thread_elevation = 10
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.09708, 6.8119)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.07885, 13.5767)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.07885, 9.20092)
                }

                def Shader "rgh_remap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/shirt/Looks/shirt/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.80428, 7.63031)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.03372, 7.63031)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.67827, 3.56491)
                }

                def Shader "trl_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/trl/trl.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.67827, 2.18237)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/shirt/Looks/shirt/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.915308, -0.634695)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.7199, -0.634695)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (5.09708, 3.48437)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.795819, 0.736954)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/shirt/Looks/shirt/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (7.02116, 3.48437)
                }
            }

            def Material "Fabric_Tux" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/shirt/Looks/Fabric_Tux/DwaFabricMaterial2_moonray.outputs:surface>

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.01, 0.01, 0.01)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 3.59574)
                }

                def Shader "DwaFabricMaterial2_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/shirt/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/shirt/Looks/Fabric_Tux/nmld_tux_moonray.outputs:out>
                    float3 inputs:warp_color.connect = </wolf/shirt/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:warp_roughness = 0.7
                    float inputs:warp_thread_elevation = 60
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 2.13595)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/shirt/Looks/Fabric_Tux/OpMap1_moonray.outputs:out>
                    float inputs:value_factor = 2.15
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.80842, 2.15899)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shirt/Looks/Fabric_Tux/clr_tux_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/shirt/Looks/Fabric_Tux/SwitchColorMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.10972, 2.03552)
                }

                def Shader "clr_tux_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/clr_tux/clr_tux.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 1.50552)
                }

                def Shader "nmld_tux_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shirt_10/default/textures/nmld_tux/nmld_tux.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.20741, 3.59574)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/shirt/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shirt/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shirt/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shirt/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/shirt/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/shirt/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/shirt/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/shirt/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "shirt_10"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/shirt_10/body_0/alembic/shirt_10.abc@
                uniform token purpose = "render"

                over "l_button"
                {
                    rel material:binding = </wolf/shirt/Looks/dwa_solid_dielectric>
                }

                over "m_button1"
                {
                    rel material:binding = </wolf/shirt/Looks/dwa_solid_dielectric>
                }

                over "m_button2"
                {
                    rel material:binding = </wolf/shirt/Looks/dwa_solid_dielectric>
                }

                over "m_button3"
                {
                    rel material:binding = </wolf/shirt/Looks/dwa_solid_dielectric>
                }

                over "m_button4"
                {
                    rel material:binding = </wolf/shirt/Looks/dwa_solid_dielectric>
                }

                over "r_button"
                {
                    rel material:binding = </wolf/shirt/Looks/dwa_solid_dielectric>
                }

                over "m_shirt"
                {
                    rel material:binding = </wolf/shirt/Looks/shirt>
                }
            }
        }
    }

    def Scope "shoes" (
        assetInfo = {
            string name = "char/wolf/shoes_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-4.1582046, -0.004355155, -2.1212242), (4.1582046, 3.6414876, 8.447841), (-4.1582046, -0.004355155, -2.1212242), (4.1582046, 3.6414876, 8.447841), (-4.1582046, -0.004355155, -2.1212242), (4.1582046, 3.6414876, 8.447841), (-4.1582046, -0.004355155, -2.1212242), (4.1582046, 3.6414876, 8.447841)]
        custom string rigged_name = "shoes_0"
        custom string scalp = "shoes_0"

        def Scope "Looks"
        {
            def Material "shoes_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/shoes/Looks/shoes_mtl/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.36145, 9.26262)
                }

                def Shader "SwitchNormalMap1_moonray"
                {
                    uniform token info:id = "SwitchNormalMap"
                    float inputs:choice = 1
                    token inputs:input0.connect = </wolf/shoes/Looks/shoes_mtl/nmld_moonray.outputs:out>
                    token inputs:input1.connect = </wolf/shoes/Looks/shoes_mtl/nmld_moonray.outputs:out>
                    token inputs:input2.connect = </wolf/shoes/Looks/shoes_mtl/nmld_holiday_moonray.outputs:out>
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.93049, 7.44463)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.22502, 7.44463)
                }

                def Shader "SwitchColorMap3_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    float inputs:choice = 1
                    float3 inputs:input0.connect = </wolf/shoes/Looks/shoes_mtl/clr_moonray.outputs:out>
                    float3 inputs:input1.connect = </wolf/shoes/Looks/shoes_mtl/clr_tux_moonray.outputs:out>
                    float3 inputs:input2.connect = </wolf/shoes/Looks/shoes_mtl/clr_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-8.31913, 3.55232)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-11.9434, 9.24092)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-11.7589, 2.36041)
                }

                def Shader "clr_tux_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/clr_tux/clr_tux.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-11.7589, 6.06464)
                }

                def Shader "SwitchColorMap2_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    float inputs:choice = 1
                    float3 inputs:input0.connect = </wolf/shoes/Looks/shoes_mtl/rgh_moonray.outputs:out>
                    float3 inputs:input1.connect = </wolf/shoes/Looks/shoes_mtl/rgh_moonray.outputs:out>
                    float3 inputs:input2.connect = </wolf/shoes/Looks/shoes_mtl/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.43822, -1.92084)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.65601, 0.0494432)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.65601, -1.38738)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/shoes/Looks/shoes_mtl/SwitchColorMap3_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    token inputs:input_normal.connect = </wolf/shoes/Looks/shoes_mtl/SwitchNormalMap1_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/shoes/Looks/shoes_mtl/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (6.47494, -0.63238)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/shoes/Looks/shoes_mtl/SwitchColorMap2_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.9702, -1.31238)
                }
            }

            def Material "shoes_mtl_award" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/shoes/Looks/shoes_mtl_award/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.782, 0.7707392, 0.744464)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, 2.66168)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/shoes/Looks/shoes_mtl_award/clr_tux_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    token inputs:input_normal.connect = </wolf/shoes/Looks/shoes_mtl_award/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/shoes/Looks/shoes_mtl_award/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.24188, -0.454811)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.50737, 3.87992)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/shoes/Looks/shoes_mtl_award/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.9702, -1.31238)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, -1.31238)
                }

                def Shader "clr_tux_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/shoes_0/default/textures/clr_tux/clr_tux.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.6101, 0.882941)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/shoes/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shoes/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shoes/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/shoes/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/shoes/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/shoes/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/shoes/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/shoes/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "shoes_0"
            {
                rel material:binding = </wolf/shoes/Looks/shoes_mtl>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/shoes_0/body_0/alembic/shoes_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "socks" (
        assetInfo = {
            string name = "char/wolf/socks_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-3.6888394, -0.06441459, -1.6714787), (3.6888394, 7.085516, 4.4059367), (-3.6888394, -0.06441459, -1.6714787), (3.6888394, 7.085516, 4.4059367), (-3.6888394, -0.06441459, -1.6714787), (3.6888394, 7.085516, 4.4059367), (-3.6888394, -0.06441459, -1.6714787), (3.6888394, 7.085516, 4.4059367)]
        custom string rigged_name = "socks_0"
        custom string scalp = "socks_0"

        def Scope "Looks"
        {
            def Material "socks_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/socks/Looks/socks_mtl/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/socks/Looks/socks_mtl/dwa_solid_dielectric_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/socks/Looks/socks_mtl/suit_mtl_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (7.23055, -0.454811)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/socks/Looks/socks_mtl/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    token inputs:input_normal.connect = </wolf/socks/Looks/socks_mtl/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/socks/Looks/socks_mtl/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.24188, -0.454811)
                }

                def Shader "suit_mtl_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/socks/Looks/socks_mtl/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/socks/Looks/socks_mtl/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/socks/Looks/socks_mtl/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/socks/Looks/socks_mtl/rgh_remap1_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/socks/Looks/socks_mtl/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_UVs_for_thread_direction = 0
                    float3 inputs:warp_color.connect = </wolf/socks/Looks/socks_mtl/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 0.715
                    float inputs:warp_thread_elevation = 30
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.24188, 8.2587)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.94233, 13.8487)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.94233, 9.47287)
                }

                def Shader "rgh_remap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/socks/Looks/socks_mtl/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.0592, 7.90226)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.8972, 7.90226)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, 1.36519)
                }

                def Shader "nmld_old_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/nmld_old/nmld_old.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    uniform float2 ui:nodegraph:node:pos = (-3.93038, 3.43193)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/socks/Looks/socks_mtl/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.9702, -1.31238)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, -1.31238)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, -0.199999)
                }
            }

            def Material "socks_mtl_award" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/socks/Looks/socks_mtl_award/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/socks/Looks/socks_mtl_award/clr_tux_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    token inputs:input_normal.connect = </wolf/socks/Looks/socks_mtl_award/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/socks/Looks/socks_mtl_award/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.24188, -0.454811)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, 1.36519)
                }

                def Shader "nmld_old_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/nmld_old/nmld_old.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    uniform float2 ui:nodegraph:node:pos = (-3.93038, 3.43193)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/socks/Looks/socks_mtl_award/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.9702, -1.31238)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, -1.31238)
                }

                def Shader "clr_tux_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/socks_0/default/textures/clr_tux/clr_tux.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.77479, -0.199999)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/socks/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/socks/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/socks/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/socks/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/socks/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/socks/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/socks/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/socks/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "socks_0"
            {
                rel material:binding = </wolf/socks/Looks/socks_mtl>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/socks_0/body_0/alembic/socks_0.abc@
                custom token moonray:subd_type = "force subdivision mesh"
                uniform token purpose = "render"
            }
        }
    }

    def Scope "tail" (
        assetInfo = {
            string name = "char/wolf/tail_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "tail_0"
        custom string scalp = "tail_0"

        def Scope "Looks"
        {
            def Material "tail_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.3.0.0", "moonshine-7.8"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/tail/Looks/tail_mtl/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/tail/Looks/tail_mtl/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:roughness = 1
                    float2 inputs:shading_tangent = (1, 1)
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tail_0/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.626611, -1.96122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/tail/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tail/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tail/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tail/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/tail/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/tail/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/tail/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/tail/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "tail_0"
            {
                rel material:binding = </wolf/tail/Looks/tail_mtl>
                custom float moonray:adaptive_error = 1
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/tail_0/body_0/alembic/tail_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "tailhair" (
        assetInfo = {
            string name = "char/wolf/tailhair_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "tailhair_0"

        def Scope "Looks"
        {
            def Material "hair_ss_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.0.4.0", "moonshine-7.30"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/tailhair/Looks/hair_ss_mtl/DwaSolidDielectricMtl_for_hair1_moonray.outputs:surface>

                def Shader "DwaSolidDielectricMtl_for_hair1_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/tailhair/Looks/hair_ss_mtl/hair_color_map_ss_moonray.outputs:out>
                    token inputs:bssrdf = "dipole"
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:diffuse_transmission_color.connect = </wolf/tailhair/Looks/hair_ss_mtl/hair_color_map_ss_moonray.outputs:out>
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.85
                    float inputs:scattering_radius = 0.6
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (10.6339, 9.38092)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/tailhair/Looks/hair_ss_mtl/clr_ss_moonray.outputs:out>
                    float inputs:value_factor = 0.4
                    uniform float2 ui:nodegraph:node:pos = (5.83356, 10.5909)
                }

                def Shader "clr_ss_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/tailhair/Looks/hair_ss_mtl/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tail_0/default/textures/clr_ss/clr_ss.<UDIM>.tx@
                    token inputs:texture_coordinates = "hair surface"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.96582, 8.52606)
                }

                def Shader "hair_color_map_ss_moonray"
                {
                    uniform token info:id = "HairMap"
                    float3 inputs:base_color.connect = </wolf/tailhair/Looks/hair_ss_mtl/clr_ss_moonray.outputs:out>
                    float inputs:bias = 0.8
                    float3 inputs:tip_color.connect = </wolf/tailhair/Looks/hair_ss_mtl/clr_ss_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (8.13565, 9.31092)
                }

                def Shader "model_uv1_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "surface_st"
                    token inputs:primitive_attribute_type = "vec2f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.43928, 9.35606)
                }
            }

            def Material "MtlLib_Hair" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.0.4.0", "moonshine-7.30"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/tailhair/Looks/MtlLib_Hair/wolf_hair_mtl_moonray.outputs:surface>

                def Shader "wolf_hair_mtl_moonray"
                {
                    uniform token info:id = "HairMaterial_v3"
                    bool inputs:casts_caustics = 1
                    float inputs:cuticle_layer_thickness = 10
                    token inputs:fresnel_type = "simple longitudinal"
                    float3 inputs:hair_color.connect = </wolf/tailhair/Looks/MtlLib_Hair/hair_color_map_moonray.outputs:out>
                    float inputs:independent_secondary_specular_roughness = 0.3
                    float inputs:independent_transmission_roughness = 1
                    float inputs:primary_specular_offset = 0
                    float inputs:refractive_index = 1.5
                    float inputs:secondary_specular_offset = -5
                    bool inputs:use_independent_secondary_specular_roughness = 1
                    bool inputs:use_independent_transmission_roughness = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (-3.91544, -10.8874)
                }

                def Shader "ColorCorrectMap_trans_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:clamp = 0
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 4
                    bool inputs:gain_offset_enabled = 0
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/tailhair/Looks/MtlLib_Hair/hair_color_map_moonray.outputs:out>
                    float inputs:saturation = 0.05
                    float inputs:saturation_b = 0.8
                    float inputs:saturation_g = 0.8
                    float inputs:saturation_r = 0.7
                    bool inputs:TMI_enabled = 0
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.43219, -2.93525)
                }

                def Shader "hair_color_map_moonray"
                {
                    uniform token info:id = "HairMap"
                    float3 inputs:base_color.connect = </wolf/tailhair/Looks/MtlLib_Hair/clr_moonray.outputs:out>
                    float inputs:bias = 0.99
                    float3 inputs:tip_color.connect = </wolf/tailhair/Looks/MtlLib_Hair/clr_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-8.10471, -8.88687)
                }

                def Shader "ColorCorrectMap_albedo_moonray"
                {
                    uniform token info:id = "ColorCorrectMap"
                    bool inputs:contrast_enabled = 0
                    float inputs:gain = 2.2
                    bool inputs:gamma_enabled = 0
                    bool inputs:hue_shift_enabled = 0
                    float3 inputs:input.connect = </wolf/tailhair/Looks/MtlLib_Hair/hair_color_map_moonray.outputs:out>
                    float inputs:offset_b = 0
                    float inputs:offset_g = 0
                    float inputs:offset_r = 0
                    float inputs:saturation_b = 0.8
                    bool inputs:saturation_enabled = 0
                    float inputs:saturation_g = 0.8
                    float inputs:saturation_r = 0.7
                    bool inputs:TMI_enabled = 0
                    bool inputs:use_per_channel_saturation = 1
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.54279, -5.70791)
                }

                def Shader "DwaSolidDielectricMtl_for_hair_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/tailhair/Looks/MtlLib_Hair/ColorCorrectMap_albedo_moonray.outputs:out>
                    token inputs:bssrdf = "dipole"
                    color3f inputs:diffuse_transmission_color = (1, 1, 1)
                    color3f inputs:diffuse_transmission_color.connect = </wolf/tailhair/Looks/MtlLib_Hair/ColorCorrectMap_trans_moonray.outputs:out>
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.85
                    float inputs:scattering_radius = 0.5
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    uniform float2 ui:nodegraph:node:pos = (-1.58069, -4.14525)
                }

                def Shader "ConstantColorMap2_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.136, 0.0728416, 0.030736003)
                    uniform float2 ui:nodegraph:node:pos = (-11.9004, -7.02435)
                }

                def Shader "ConstantColorMap1_moonray"
                {
                    uniform token info:id = "ConstantColorMap"
                    color3f inputs:color_value = (0.03, 0.018119998, 0.010199999)
                    uniform float2 ui:nodegraph:node:pos = (-20.4268, -10.5157)
                }

                def Shader "clr_hair_tip_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/tailhair/Looks/MtlLib_Hair/model_uv1_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tailhair_0/default/textures/clr_hair_tip/clr_hair_tip.<UDIM>.tx@
                    token inputs:texture_coordinates = "input texture coordinates"
                    int inputs:udim_max_v = 20
                    uniform float2 ui:nodegraph:node:pos = (-15.9183, -7.02435)
                }

                def Shader "model_uv1_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "surface_st"
                    token inputs:primitive_attribute_type = "vec2f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-18.4364, -7.02435)
                }

                def Shader "model_uv_moonray"
                {
                    uniform token info:id = "AttributeMap"
                    string inputs:primitive_attribute_name = "model_uv"
                    token inputs:primitive_attribute_type = "vec3f"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-13.5917, -9.1124)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    vector3f inputs:input_texture_coordinates = (1, 1, 1)
                    vector3f inputs:input_texture_coordinates.connect = </wolf/tailhair/Looks/MtlLib_Hair/model_uv_moonray.outputs:out>
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tail_0/default/textures/clr/clr.<UDIM>.tx@
                    token inputs:texture_coordinates = "hair surface"
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-11.1179, -9.1124)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/tailhair/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tailhair/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tailhair/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tailhair/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/tailhair/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/tailhair/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/tailhair/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/tailhair/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def Procedural "hair_set"
            {
                custom float procedural:base_width_factor = 3.5
                uniform token procedural:class = "WillowGeometry_v2"
                custom float procedural:density_factor = 0.8
                custom asset procedural:hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/tailhair_0/body_0/tailhair_0.hair@
                custom asset procedural:reference_hair = @/studio/badguys/shdw_surf/lib/model/char/wolf/tailhair_0/body_0/tailhair_0.hair@
                custom int procedural:refine_level = 2
                custom token procedural:remove_curve_sets_pattern = "*core*"
                custom int procedural:thread_chunk_size = 1000
                uniform token purpose = "render"
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
                uniform token[] xformOpOrder = ["xformOp:transform"]

                def GeomSubset "default"
                {
                    rel material:binding = </wolf/tailhair/Looks/hair_ss_mtl>
                }
            }
        }
    }

    def Scope "teethplate" (
        assetInfo = {
            string name = "char/wolf/teethplate_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "teethplate_0"
        custom string scalp = "teethplate_0"

        def Scope "Looks"
        {
            def Material "teeth_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.3.0.0", "moonshine-7.8"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/teethplate/Looks/teeth_mtl/teeth_moonray.outputs:surface>

                def Shader "teeth_moonray"
                {
                    uniform token info:id = "DwaSkinMaterial"
                    color3f inputs:albedo = (0.6, 0.6, 0.6)
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    bool inputs:enable_sss_input_normal = 1
                    float inputs:moisture_mask = 0
                    float inputs:moisture_roughness = 1
                    float inputs:refractive_index = 1.4
                    float inputs:roughness = 0.3
                    color3f inputs:scattering_color = (0.65, 0.65, 0.65)
                    float inputs:scattering_radius = 0.5
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (2.00995, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/teethplate/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/teethplate/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/teethplate/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/teethplate/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/teethplate/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/teethplate/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/teethplate/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/teethplate/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "teethplate_0"
            {
                rel material:binding = </wolf/teethplate/Looks/teeth_mtl>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/teethplate_0/head_0/alembic/teethplate_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "teethzigzag" (
        assetInfo = {
            string name = "char/wolf/teethzigzag_0"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        custom string rigged_name = "teethzigzag_0"
        custom string scalp = "teethzigzag_0"

        def Scope "Looks"
        {
            def Material "teeth_mtl" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-8.3.0.0", "moonshine-7.8"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/teethzigzag/Looks/teeth_mtl/teeth_moonray.outputs:surface>

                def Shader "teeth_moonray"
                {
                    uniform token info:id = "DwaSkinMaterial"
                    color3f inputs:albedo = (0.6, 0.6, 0.6)
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    bool inputs:enable_sss_input_normal = 1
                    float inputs:moisture_mask = 0
                    float inputs:moisture_roughness = 1
                    float inputs:refractive_index = 1.4
                    float inputs:roughness = 0.3
                    color3f inputs:scattering_color = (0.65, 0.65, 0.65)
                    float inputs:scattering_radius = 0.5
                    token inputs:specular_model = "GGX"
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (2.20489, -2.19122)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/teethzigzag/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/teethzigzag/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/teethzigzag/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/teethzigzag/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/teethzigzag/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/teethzigzag/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/teethzigzag/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/teethzigzag/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "teethzigzag_0"
            {
                rel material:binding = </wolf/teethzigzag/Looks/teeth_mtl>
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/teethzigzag_0/head_0/alembic/teethzigzag_0.abc@
                uniform token purpose = "render"
            }
        }
    }

    def Scope "tie" (
        assetInfo = {
            string name = "char/wolf/tie_10"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-2.7868207, 37.188717, -3.2818367), (2.7868207, 48.6919, 3.9855325), (-2.7868207, 37.188717, -3.2818367), (2.7868207, 48.6919, 3.9855325), (-2.7868207, 37.188717, -3.2818367), (2.7868207, 48.6919, 3.9855325), (-2.7868207, 37.188717, -3.2818367), (2.7868207, 48.6919, 3.9855325)]
        custom string rigged_name = "tie_10"
        custom string scalp = "tie_10"

        def Scope "Looks"
        {
            def Material "metal" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/tie/Looks/metal/DwaMetalMaterial1_moonray.outputs:surface>

                def Shader "DwaMetalMaterial1_moonray"
                {
                    uniform token info:id = "DwaMetalMaterial"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/tie/Looks/metal/nmld_moonray.outputs:out>
                    float3 inputs:metallic_color.connect = </wolf/tie/Looks/metal/clr_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/tie/Looks/metal/rgh_remap_moonray.outputs:out>
                    bool inputs:show_emission = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (6.34922, -0.148211)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.07431, 1.1491)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (2.82235, -2.03643)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/tie/Looks/metal/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.07431, -0.148211)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.0743073, -0.148211)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, 3.85185)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/tie/Looks/metal/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, 3.85185)
                }
            }

            def Material "velvet" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/tie/Looks/velvet/DwaSwitchMaterial1_moonray.outputs:surface>

                def Shader "DwaSwitchMaterial1_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/tie/Looks/velvet/DwaFabricMaterial2_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/tie/Looks/velvet/DwaFabricMaterial_satin_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (10.3185, 2.13595)
                }

                def Shader "DwaFabricMaterial2_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/tie/Looks/velvet/ColorCorrectHsvMap1_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/tie/Looks/velvet/nmld_moonray.outputs:out>
                    float3 inputs:warp_color.connect = </wolf/tie/Looks/velvet/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:warp_roughness = 0.7
                    float inputs:warp_thread_elevation = 60
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 2.13595)
                }

                def Shader "DwaFabricMaterial_satin_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/tie/Looks/velvet/clr_holiday_moonray.outputs:out>
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/tie/Looks/velvet/rgh_remap_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/tie/Looks/velvet/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_independent_weft_attributes = 1
                    float3 inputs:warp_color.connect = </wolf/tie/Looks/velvet/ColorCorrectHsvMap3_moonray.outputs:out>
                    float inputs:warp_roughness = 0.35
                    float inputs:warp_thread_coverage = 0.7
                    float inputs:warp_thread_elevation = 30
                    float3 inputs:weft_color.connect = </wolf/tie/Looks/velvet/ColorCorrectHsvMap3_moonray.outputs:out>
                    float inputs:weft_roughness = 0.25
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 12.4376)
                }

                def Shader "ColorCorrectHsvMap3_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/tie/Looks/velvet/clr_holiday_moonray.outputs:out>
                    float inputs:value_factor = 0.75
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.66222, 14.8183)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.29714, 14.9057)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.29714, 19.2815)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/tie/Looks/velvet/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.58599, 13.3351)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.25201, 13.3351)
                }

                def Shader "amb_control_moonray"
                {
                    uniform token info:id = "BlendMap"
                    float inputs:blend_amount = 0
                    float3 inputs:color_A.connect = </wolf/tie/Looks/velvet/clr_flt_moonray.outputs:out>
                    float3 inputs:color_B.connect = </wolf/tie/Looks/velvet/clr_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.76922, -1.31228)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-8.45515, -0.56228)
                }

                def Shader "clr_flt_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/clr_flt/clr_flt.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-8.45515, -1.89636)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.13478, 7.18013)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/tie/Looks/velvet/amb_control_moonray.outputs:out>
                    float inputs:value_factor = 1.5
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.9702, 1.82125)
                }
            }

            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/tie/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:surface>

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/tie/Looks/dwa_solid_dielectric/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/tie/Looks/dwa_solid_dielectric/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/tie/Looks/dwa_solid_dielectric/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.30385, 5.42504)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/tie/Looks/dwa_solid_dielectric/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, -2.19122)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -2.19122)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 7.46623)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/tie_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -0.877773)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/tie/Looks/dwa_solid_dielectric/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.57834, 7.46623)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/tie/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tie/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tie/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/tie/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/tie/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/tie/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/tie/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/tie/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "tie_10"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/tie_10/body_0/alembic/tie_10.abc@
                uniform token purpose = "render"

                over "m_button"
                {
                    rel material:binding = </wolf/tie/Looks/metal>
                }

                over "m_tie"
                {
                    rel material:binding = </wolf/tie/Looks/velvet>
                }
            }
        }
    }

    def Scope "vest" (
        assetInfo = {
            string name = "char/wolf/vest_10"
        }
        assetType = "char_subasset"
        kind = "component"
    )
    {
        float3[] extentsHint = [(-5.6986685, 33.896343, -4.1466274), (5.581174, 48.250687, 4.206938), (-5.6986685, 33.896343, -4.1466274), (5.581174, 48.250687, 4.206938), (-5.6986685, 33.896343, -4.1466274), (5.581174, 48.250687, 4.206938), (-5.6986685, 33.896343, -4.1466274), (5.581174, 48.250687, 4.206938)]
        custom string rigged_name = "vest_10"
        custom string scalp = "vest_10"

        def Scope "Looks"
        {
            def Material "dwa_solid_dielectric" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/vest/Looks/dwa_solid_dielectric/vest_10_mtl_moonray.outputs:surface>

                def Shader "vest_10_mtl_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/vest/Looks/dwa_solid_dielectric/dwa_solid_dielectric_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/vest/Looks/dwa_solid_dielectric/DwaBaseMaterial_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (9.31002, -2.19122)
                }

                def Shader "dwa_solid_dielectric_moonray"
                {
                    uniform token info:id = "DwaSolidDielectricMaterial"
                    float3 inputs:albedo.connect = </wolf/vest/Looks/dwa_solid_dielectric/clr_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/vest/Looks/dwa_solid_dielectric/nmld_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/vest/Looks/dwa_solid_dielectric/rgh_remap_moonray.outputs:out>
                    float2 inputs:shading_tangent = (1, 1)
                    bool inputs:show_clearcoat = 1
                    bool inputs:show_emission = 1
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, -2.19122)
                }

                def Shader "DwaBaseMaterial_moonray"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/vest/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float inputs:clearcoat = 0
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/vest/Looks/dwa_solid_dielectric/nmld_holiday_moonray.outputs:out>
                    float inputs:metallic = 1
                    float inputs:metallic.connect = </wolf/vest/Looks/dwa_solid_dielectric/mtl_holiday_moonray.outputs:out>
                    float3 inputs:metallic_color.connect = </wolf/vest/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float3 inputs:metallic_edge_color.connect = </wolf/vest/Looks/dwa_solid_dielectric/clr_holiday_moonray.outputs:out>
                    float inputs:roughness = 1
                    float inputs:roughness.connect = </wolf/vest/Looks/dwa_solid_dielectric/rgh_remap1_moonray.outputs:out>
                    bool inputs:show_emission = 1
                    token inputs:specular_model = "GGX"
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.83342, 11.4696)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.52262, 18.4196)
                }

                def Shader "mtl_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/mtl_holiday/mtl_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-2.98222, 16.264)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.52262, 14.0438)
                }

                def Shader "rgh_remap1_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/vest/Looks/dwa_solid_dielectric/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.63949, 12.4732)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.47749, 12.4732)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.30385, 5.42504)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/vest/Looks/dwa_solid_dielectric/rgh_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.16658, -2.19122)
                }

                def Shader "rgh_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/rgh/rgh.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -2.19122)
                }

                def Shader "dsp_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/dsp/dsp.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.57834, 7.46623)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-4.16658, -0.877773)
                }

                def Shader "normal_displacement_moonray"
                {
                    uniform token info:id = "NormalDisplacement"
                    float3 inputs:height.connect = </wolf/vest/Looks/dwa_solid_dielectric/dsp_moonray.outputs:out>
                    float inputs:zero_value = 0.5
                    uniform float2 ui:nodegraph:node:pos = (-1.57834, 7.46623)
                }
            }

            def Material "Fabric_Tux" (
                customData = {
                    string[] creationPackages = ["houdini_moonray-9.27.10.0", "moonshine-7.54"]
                }
            )
            {
                token outputs:moonray:surface.connect = </wolf/vest/Looks/Fabric_Tux/vest_10_mtl_moonray.outputs:surface>

                def Shader "vest_10_mtl_moonray"
                {
                    uniform token info:id = "DwaSwitchMaterial"
                    token inputs:material0.connect = </wolf/vest/Looks/Fabric_Tux/DwaFabricMaterial2_moonray.outputs:out>
                    token inputs:material1.connect = </wolf/vest/Looks/Fabric_Tux/suit_mtl_moonray.outputs:out>
                    token outputs:surface
                    uniform float2 ui:nodegraph:node:pos = (10.193, 2.13595)
                }

                def Shader "DwaFabricMaterial2_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/vest/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    token inputs:input_normal.connect = </wolf/vest/Looks/Fabric_Tux/nmld_moonray.outputs:out>
                    float3 inputs:warp_color.connect = </wolf/vest/Looks/Fabric_Tux/ColorCorrectHsvMap1_moonray.outputs:out>
                    float inputs:warp_roughness = 1
                    float inputs:warp_thread_elevation = 60
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 2.13595)
                }

                def Shader "suit_mtl_moonray"
                {
                    uniform token info:id = "DwaFabricMaterial"
                    float3 inputs:albedo.connect = </wolf/vest/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    token inputs:diffuse_transmission_blending_behavior = "RGB"
                    color3f inputs:emission = (0, 0, 0)
                    float inputs:fabric_diffuse_scattering = 0.3
                    float inputs:fuzz = 0.1
                    float3 inputs:fuzz_albedo.connect = </wolf/vest/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    token inputs:fuzz_normal.connect = </wolf/vest/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    float inputs:fuzz_roughness = 1
                    float inputs:fuzz_roughness.connect = </wolf/vest/Looks/Fabric_Tux/rgh_remap_moonray.outputs:out>
                    token inputs:input_normal.connect = </wolf/vest/Looks/Fabric_Tux/nmld_holiday_moonray.outputs:out>
                    bool inputs:use_UVs_for_thread_direction = 0
                    float3 inputs:warp_color.connect = </wolf/vest/Looks/Fabric_Tux/clr_holiday_moonray.outputs:out>
                    float inputs:warp_roughness = 0.715
                    float inputs:warp_thread_elevation = 30
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (3.78005, 7.95702)
                }

                def Shader "SwitchColorMap1_moonray"
                {
                    uniform token info:id = "SwitchColorMap"
                    color3f inputs:input0 = (0.927, 0.927, 0.927)
                    color3f inputs:input1 = (0.00424, 0.019736, 0.04)
                    color3f inputs:input2 = (0.04, 0.04, 0.04)
                    color3f inputs:input3 = (0.036, 0.00666, 0.00666)
                    color3f inputs:input4 = (0.0063500004, 0.0147425, 0.025)
                    color3f inputs:input5 = (0.13, 0.13, 0.13)
                    color3f inputs:input6 = (0.01, 0.01, 0.01)
                    color3f inputs:input7 = (0.01, 0.01, 0.01)
                    color3f inputs:input8 = (0.01, 0.01, 0.01)
                    color3f inputs:input9 = (0.01, 0.01, 0.01)
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-5.88146, 3.59574)
                }

                def Shader "nmld_holiday_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/nmld_holiday/nmld_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.40416, 14.1696)
                }

                def Shader "clr_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/clr_holiday/clr_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.40416, 9.79382)
                }

                def Shader "rgh_remap_moonray"
                {
                    uniform token info:id = "RemapMap"
                    float3 inputs:input.connect = </wolf/vest/Looks/Fabric_Tux/rgh_holiday_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (0.47897, 8.22321)
                }

                def Shader "rgh_holiday_moonray"
                {
                    uniform token info:id = "ImageMap"
                    token inputs:gamma = "off"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/rgh_holiday/rgh_holiday.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-1.35903, 8.22321)
                }

                def Shader "amb_control_moonray"
                {
                    uniform token info:id = "BlendMap"
                    float inputs:blend_amount = 0
                    float3 inputs:color_A.connect = </wolf/vest/Looks/Fabric_Tux/clr_flt_moonray.outputs:out>
                    float3 inputs:color_B.connect = </wolf/vest/Looks/Fabric_Tux/clr_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-6.58468, 0.701094)
                }

                def Shader "clr_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/clr/clr.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.36439, 1.33395)
                }

                def Shader "clr_flt_moonray"
                {
                    uniform token info:id = "ImageMap"
                    asset inputs:texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/clr_flt/clr_flt.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-9.48071, 0.0468819)
                }

                def Shader "ColorCorrectHsvMap1_moonray"
                {
                    uniform token info:id = "ColorCorrectHsvMap"
                    float3 inputs:input.connect = </wolf/vest/Looks/Fabric_Tux/OpMap1_moonray.outputs:out>
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-0.80842, 2.15899)
                }

                def Shader "OpMap1_moonray"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/vest/Looks/Fabric_Tux/amb_control_moonray.outputs:out>
                    float3 inputs:op2.connect = </wolf/vest/Looks/Fabric_Tux/SwitchColorMap1_moonray.outputs:out>
                    token inputs:operation = "multiply"
                    float3 outputs:out
                    uniform float2 ui:nodegraph:node:pos = (-3.10972, 2.03552)
                }

                def Shader "nmld_moonray"
                {
                    uniform token info:id = "ImageNormalMap"
                    asset inputs:tangent_space_normal_texture = @/studio/badguys/shdw_surf/lib/mtl/char/wolf/vest_10/default/textures/nmld/nmld.<UDIM>.tx@
                    int inputs:udim_max_v = 20
                    token outputs:out
                    uniform float2 ui:nodegraph:node:pos = (1.20741, 3.59574)
                }
            }

            def Material "model_colors"
            {
                token outputs:moonray:surface.connect = </wolf/vest/Looks/model_colors/dwa_base_mtl.outputs:surface>

                def Shader "color_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    token inputs:primitive_attribute_name = "color"
                    float3 outputs:out
                }

                def Shader "trans_attr_map"
                {
                    uniform token info:id = "AttributeMap"
                    color3f inputs:default_value = (0, 0, 0)
                    token inputs:primitive_attribute_name = "transparency"
                    token inputs:primitive_attribute_type = "float"
                    float3 outputs:out
                }

                def Shader "make_opacity"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/vest/Looks/model_colors/trans_attr_map.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "invert op1"
                    float3 outputs:out
                }

                def Shader "floor_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/vest/Looks/model_colors/make_opacity.outputs:out>
                    float inputs:op2_factor = 1
                    token inputs:operation = "floor"
                    float3 outputs:out
                }

                def Shader "maximum_map"
                {
                    uniform token info:id = "OpMap"
                    float3 inputs:op1.connect = </wolf/vest/Looks/model_colors/floor_map.outputs:out>
                    float inputs:op2_factor = 0.02
                    token inputs:operation = "maximum"
                    float3 outputs:out
                }

                def Shader "layer_map"
                {
                    uniform token info:id = "LayerMap"
                    float3 inputs:input_A.connect = </wolf/vest/Looks/model_colors/color_attr_map.outputs:out>
                    float inputs:mask.connect = </wolf/vest/Looks/model_colors/floor_map.outputs:out>
                    token inputs:mode = "over"
                    float3 outputs:out
                }

                def Shader "dwa_base_mtl"
                {
                    uniform token info:id = "DwaBaseMaterial"
                    float3 inputs:albedo.connect = </wolf/vest/Looks/model_colors/layer_map.outputs:out>
                    float inputs:presence.connect = </wolf/vest/Looks/model_colors/maximum_map.outputs:out>
                    float inputs:refractive_index = 1.1
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }
        }

        def Scope "Geometry"
        {
            uniform token purpose = "render"

            def "vest_10"
            {
                custom float moonray:adaptive_error = 4
                custom float moonray:mesh_resolution = 3
                custom asset moonray:model = @/studio/badguys/shdw_surf/lib/model/char/wolf/vest_10/body_0/alembic/vest_10.abc@
                uniform token purpose = "render"

                over "m_button1"
                {
                    rel material:binding = </wolf/vest/Looks/dwa_solid_dielectric>
                }

                over "m_button2"
                {
                    rel material:binding = </wolf/vest/Looks/dwa_solid_dielectric>
                }

                over "m_button3"
                {
                    rel material:binding = </wolf/vest/Looks/dwa_solid_dielectric>
                }

                over "m_vest"
                {
                    rel material:binding = </wolf/vest/Looks/Fabric_Tux>
                }

                over "m_vestbelt"
                {
                    rel material:binding = </wolf/vest/Looks/Fabric_Tux>
                }
            }
        }
    }

    over "proxy"
    {
    }
}

